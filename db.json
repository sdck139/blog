{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/huno/source/css/animate.css","path":"css/animate.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huno/source/css/china-social-icon.css","path":"css/china-social-icon.css","modified":0,"renderable":1},{"_id":"themes/huno/source/css/uno.css","path":"css/uno.css","modified":0,"renderable":1},{"_id":"themes/huno/source/images/totop.png","path":"images/totop.png","modified":0,"renderable":1},{"_id":"themes/huno/source/js/jquery.githubRepoWidget.min.js","path":"js/jquery.githubRepoWidget.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/awesome-toc.min.js","path":"js/awesome-toc.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/scale.fix.js","path":"js/scale.fix.js","modified":0,"renderable":1},{"_id":"themes/huno/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.eot","path":"fonts/china-social/china-social.eot","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.woff","path":"fonts/china-social/china-social.woff","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.svg","path":"fonts/china-social/china-social.svg","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/china-social.ttf","path":"fonts/china-social/china-social.ttf","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.eot","path":"fonts/foundation-icons/foundation-icons.eot","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.css","path":"fonts/foundation-icons/foundation-icons.css","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/china-social/readme.html","path":"fonts/china-social/readme.html","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.woff","path":"fonts/foundation-icons/foundation-icons.woff","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.ttf","path":"fonts/foundation-icons/foundation-icons.ttf","modified":0,"renderable":1},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.svg","path":"fonts/foundation-icons/foundation-icons.svg","modified":0,"renderable":1},{"_id":"themes/huno/source/images/background-cover.jpg","path":"images/background-cover.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/huno/README.en.md","hash":"0878f26ed7fd9d4cbfeb0ddab5e1e14c93be793a","modified":1482231517090},{"_id":"themes/huno/_config.yml","hash":"745ce3a9b404197a62e20157f1ecfd30bff84753","modified":1482231517147},{"_id":"themes/huno/README.md","hash":"8940f32e649ba30b684f347c04826a066fa9f399","modified":1482231517124},{"_id":"themes/huno/languages/default.yml","hash":"bddd7fd79412849a52b9a36aae36af111b2db619","modified":1482231517182},{"_id":"themes/huno/languages/zh-CN.yml","hash":"fc0fcc3819c03baeecf2aa51cec08257973288cf","modified":1482231517192},{"_id":"themes/huno/languages/zh-TW.yml","hash":"d865666c14c58c70738d9aef04ae14e38e750c14","modified":1463145662000},{"_id":"source/_posts/Fuck-the-LeetCode-一.md","hash":"ff28619b9c6e836da3e67a24383e3af21d540336","modified":1493803069441},{"_id":"source/_posts/2017年OKR.md","hash":"5663e83863f228474727de42500ba1cd9ae5bbde","modified":1493021006242},{"_id":"source/_posts/91公分之外.md","hash":"43deb8fd2e06344b0f9ee28f0d0d2481498d2012","modified":1493021006246},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1481858184224},{"_id":"themes/huno/cs-icon.png","hash":"4ba5bfbacb1a533f3561112406c305e9510aa8dd","modified":1482231517150},{"_id":"source/_posts/幸福简易教学指南（一）.md","hash":"c774e304a0899fd39d3a7e18586f8649d07a1264","modified":1482412730484},{"_id":"themes/huno/source/css/animate.css","hash":"651fcf046b1bd2bff3ab4cb8947ff7fe058de373","modified":1482231517730},{"_id":"themes/huno/source/css/archive.css","hash":"7238ea5f6bda859e3bae7aaa546caf27fe1fb0cc","modified":1482231517732},{"_id":"source/_posts/时间旅行者.md","hash":"78125a45dd75777bce1d83eccf4eb3e0a28aa2f8","modified":1493021006261},{"_id":"themes/huno/source/css/highlight.styl","hash":"92eabbf94e7a06e968c356bedf4adb04700f1c2e","modified":1463145662000},{"_id":"themes/huno/source/css/china-social-icon.css","hash":"2f90442f6d0d289e49c07a85c2dae32cab8b2063","modified":1463145662000},{"_id":"themes/huno/source/css/uno.css","hash":"dae2b90f40f9f46b8c3c273898de165e5e594f9e","modified":1482231517762},{"_id":"themes/huno/source/images/totop.png","hash":"4f6cb11941e5a72b03cb00cf9d9d55671b4310eb","modified":1482231517927},{"_id":"themes/huno/source/js/jquery.githubRepoWidget.min.js","hash":"94a141fa474ec5022f7c397b4fd3ff92405ab755","modified":1482231517930},{"_id":"themes/huno/source/js/main.js","hash":"4a477bf23afa10929c4be55ab90c59ce0d9b9842","modified":1482231518032},{"_id":"themes/huno/layout/archive.ejs","hash":"23aff325ab97b2c7dde6e757fa3add5226a88b4f","modified":1482231517484},{"_id":"themes/huno/source/js/awesome-toc.min.js","hash":"b4d0f2a33f8340eb2543e8b2cee0dfd745cfb54a","modified":1463145662000},{"_id":"themes/huno/source/js/scale.fix.js","hash":"ce593f56728cc1cedf2e513cb20b926de3b05e07","modified":1482231518033},{"_id":"themes/huno/layout/index.ejs","hash":"12c817a875f353c03d8795c2a7b653e4da22c17e","modified":1482231517516},{"_id":"themes/huno/layout/category.ejs","hash":"2b412d1b52b9da8ad19f6a66b1c18ab0b7546214","modified":1482231517496},{"_id":"themes/huno/layout/page.ejs","hash":"70a50ecf7e1aa9c658212f1e77783dcb287d56a6","modified":1482231517700},{"_id":"themes/huno/layout/page-archive.ejs","hash":"ce5523d829c0fdd6a79984fcf15e33572a220df9","modified":1482231517641},{"_id":"themes/huno/layout/post.ejs","hash":"86c9d13e8abdcff4d368e34595e2d2f11f37e9d4","modified":1482231517712},{"_id":"themes/huno/layout/tag.ejs","hash":"fefa03bed577cae2e1aac19bd5d30c5034f453a0","modified":1482231517721},{"_id":"source/_posts/images/1.png","hash":"990be6032b7b7b1966293b785533e0e9fb637c29","modified":1482231517043},{"_id":"themes/huno/layout/layout.ejs","hash":"4977031185ae4687c0ba0ec1f7aec5050b203726","modified":1482231517617},{"_id":"source/_posts/images/2.jpg","hash":"75771b875426c213dacedb56019559b2d4297edf","modified":1482231517049},{"_id":"source/_posts/images/3.png","hash":"a6227f3be3bab733a0e36ce2b6048413db5bfba2","modified":1482231517051},{"_id":"source/_posts/images/5.png","hash":"d4ef7b10b6ed95bcaf90d26f907abdd356bc0623","modified":1482231517060},{"_id":"source/_posts/images/7.png","hash":"6577cf796635758dbab771c16ceb392d9e1526ea","modified":1482231517063},{"_id":"source/_posts/images/4.png","hash":"54e9dde2925327bde83799c7e2537d13c91aca10","modified":1482231517056},{"_id":"source/_posts/images/6.png","hash":"a7fc479159b30d9bc3d85991295b8dd13b618555","modified":1482231517062},{"_id":"themes/huno/layout/_partials/list-posts.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482231517331},{"_id":"themes/huno/layout/_scripts/site-analytics.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1482231517476},{"_id":"themes/huno/source/js/jquery.min.js","hash":"8b6babff47b8a9793f37036fd1b1a3ad41d38423","modified":1482231518031},{"_id":"themes/huno/source/fonts/china-social/china-social.eot","hash":"a43a5c3d66f0d38639a595ebd02857e152ada475","modified":1482231517782},{"_id":"themes/huno/source/fonts/china-social/china-social.woff","hash":"74c0ac5268cf7ffe270faaf7c960b74d483d2df1","modified":1482231517825},{"_id":"themes/huno/source/fonts/china-social/china-social.svg","hash":"4bad780e6a31f4fa9fef037a3d9ecb8623042a6e","modified":1463145662000},{"_id":"themes/huno/source/fonts/china-social/china-social.ttf","hash":"2f94360528097df7dcfb39baf8df5393a0d47ca3","modified":1482231517805},{"_id":"themes/huno/source/fonts/foundation-icons/.fontcustom-data","hash":"3b0cfb3ba2ee7ccae391bc66b3acaa6895932e5f","modified":1482231517847},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.eot","hash":"d584172686583fd510d8f04cf21e6e77fce51435","modified":1482231517873},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.css","hash":"426036f1d554b9dffae8b38acc36cade40d9521a","modified":1482231517860},{"_id":"themes/huno/source/fonts/china-social/readme.html","hash":"ca335751de11d6ef7721dc907571de39cef6e361","modified":1463145662000},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.woff","hash":"112fb0e498037f2fea036adb8105e47638159eaa","modified":1482231517906},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.ttf","hash":"4b2bce6c792493a4a5716b6fec2dbefe89492c3f","modified":1482231517896},{"_id":"themes/huno/layout/_partials/archive.ejs","hash":"2c413cde5b1d3a475777e8ff8226762dfe92610c","modified":1482231517229},{"_id":"themes/huno/layout/_partials/disqus.ejs","hash":"30c043cc683c78f345a658cf64b37e55e6521685","modified":1482231517288},{"_id":"themes/huno/layout/_partials/footer.ejs","hash":"59070ce06159cfd45b13c9499b1e4f0a272d1019","modified":1482231517331},{"_id":"themes/huno/layout/_partials/pagination.ejs","hash":"1240c019aa4df269777c54c0d2124b534ec1f380","modified":1482231517347},{"_id":"themes/huno/layout/_partials/duoshuo.ejs","hash":"7cfe423c088a3bf0565e27a1c17d1b99a260786b","modified":1482231517316},{"_id":"themes/huno/layout/_partials/article.ejs","hash":"12993f72e718ac81763c2095f64b7ef3523f1777","modified":1482231517268},{"_id":"themes/huno/layout/_partials/social.ejs","hash":"9d40db0aa7f062adab1a0dcfa45c57e2a724ac00","modified":1482231517376},{"_id":"themes/huno/layout/_partials/side-panel.ejs","hash":"8d38cb60200b157d24866417686b0479def918de","modified":1482231517363},{"_id":"themes/huno/layout/_scripts/killie6.ejs","hash":"2d5db8a53962ac704b8bfc40688319bed2e84ac9","modified":1482231517446},{"_id":"source/_posts/images/91_1.jpg","hash":"e221da14bf0376b1a93d4882ed3554a7ebf67f79","modified":1483161943463},{"_id":"themes/huno/layout/_scripts/mathjax.ejs","hash":"2921f9f3b3c3e40f59c2d023764694a79ac07926","modified":1482231517476},{"_id":"themes/huno/layout/_scripts/awesome-toc.ejs","hash":"b39df57929c246726ca45723ca9ad1a4104738c4","modified":1482231517414},{"_id":"themes/huno/layout/_scripts/github-repo-widget.ejs","hash":"ee64a8e431318cb8fb25f59cfeec0def95b58912","modified":1482231517441},{"_id":"themes/huno/source/fonts/foundation-icons/foundation-icons.svg","hash":"bdca38f453f9935203fe8cd071e97d7f8576e0be","modified":1482231517884},{"_id":"themes/huno/source/images/background-cover.jpg","hash":"08162d5ddd6c081f2713bfd10261e62f0752a600","modified":1482231517926},{"_id":"source/_posts/images/8.png","hash":"b0138b3b863d908883aecf5c002ba70f0bdb8fd8","modified":1482243950233},{"_id":"source/_posts/images/14.png","hash":"5db7a58ad107d784cdfa68a1970cf1ae6b8711f2","modified":1482244025827},{"_id":"source/_posts/images/10.png","hash":"35f4a18a3b93c8810641283e548df0db1b02c881","modified":1482243975430},{"_id":"source/_posts/images/15.png","hash":"c1fc8a0ed76352523b73e38272c17c56450e8d9e","modified":1482244041481},{"_id":"source/_posts/images/11.png","hash":"28e575c13db3b4a181baa8cbf54ef690cc916402","modified":1482243989465},{"_id":"source/_posts/images/12.png","hash":"1fd92708aad31fff6da2beefc4ae6805032e7233","modified":1482244000438},{"_id":"source/_posts/images/9.png","hash":"36650c549195e44c4766b67efa8d1536d0d8378b","modified":1482243961466},{"_id":"themes/huno/demo.gif","hash":"cf6121b4aa0f3b07a2f919099942d97206202aa8","modified":1482231517172},{"_id":"source/_posts/images/13.png","hash":"fca785e49529199fd6adcf2577aa58f9e0af0447","modified":1482244010972},{"_id":"public/2017/02/27/2017年OKR/index.html","hash":"e82b906e30c0ee4ce96abb9b5724b138cde3b750","modified":1493021275689},{"_id":"public/2017/01/06/时间旅行者/index.html","hash":"34f6aa61dc57d2e4712632cf191fa99e6f8c76e4","modified":1493021275690},{"_id":"public/2016/12/31/91公分之外/index.html","hash":"873012a8b19cbd3004a02aa62c9bbdb7d3be8ed9","modified":1493021275689},{"_id":"public/2016/12/20/hello-world/index.html","hash":"2a648ab4f84a41553239b395f06fbf183535a238","modified":1492951984222},{"_id":"public/archives/index.html","hash":"f40dad13062d5e82d7d646afd9a044dd6c50e894","modified":1493021320919},{"_id":"public/archives/2016/index.html","hash":"7790df4a559d15248d61ab0e4a7adb8c00f47bd5","modified":1493021320920},{"_id":"public/archives/2016/12/index.html","hash":"60902392bb6f0484e3aeebd022b1b32e96e36815","modified":1493021320920},{"_id":"public/archives/2017/index.html","hash":"ef46aa0a1bdc439855dd59061dbf99cd5d089676","modified":1493021320920},{"_id":"public/2016/12/19/幸福简易教学指南（一）/index.html","hash":"91e56ad9e61db095457da32eb520750e03cf5744","modified":1493021275690},{"_id":"public/2017/04/23/Fuck-the-LeetCode-一/index.html","hash":"02fbf309b1d3e4ab768cbc3fbb2b1d8e97a69777","modified":1493803112765},{"_id":"public/archives/2017/01/index.html","hash":"7defc8e791aa8b2f3c538bc69ebeba580c48fff1","modified":1493021320920},{"_id":"public/archives/2017/02/index.html","hash":"aa9acc6236ece9571deefad53fb642cfb497f3ab","modified":1493021320920},{"_id":"public/index.html","hash":"19431ded855da5e352018009b31632c78b30fba2","modified":1493021275690},{"_id":"public/archives/2017/04/index.html","hash":"c59136af421c1937f32fe38d2b93d2d10b192f9a","modified":1493021320920},{"_id":"public/fonts/china-social/china-social.eot","hash":"a43a5c3d66f0d38639a595ebd02857e152ada475","modified":1492951984241},{"_id":"public/fonts/china-social/china-social.woff","hash":"74c0ac5268cf7ffe270faaf7c960b74d483d2df1","modified":1492951984241},{"_id":"public/fonts/china-social/china-social.svg","hash":"4bad780e6a31f4fa9fef037a3d9ecb8623042a6e","modified":1493021275695},{"_id":"public/fonts/china-social/china-social.ttf","hash":"2f94360528097df7dcfb39baf8df5393a0d47ca3","modified":1492951984241},{"_id":"public/fonts/foundation-icons/foundation-icons.woff","hash":"112fb0e498037f2fea036adb8105e47638159eaa","modified":1492951984241},{"_id":"public/fonts/foundation-icons/foundation-icons.eot","hash":"d584172686583fd510d8f04cf21e6e77fce51435","modified":1492951984241},{"_id":"public/fonts/foundation-icons/foundation-icons.ttf","hash":"4b2bce6c792493a4a5716b6fec2dbefe89492c3f","modified":1492951984241},{"_id":"public/images/totop.png","hash":"4f6cb11941e5a72b03cb00cf9d9d55671b4310eb","modified":1492951986182},{"_id":"public/css/highlight.css","hash":"701da6788bee02c165236174b6767ae06957f051","modified":1492951986213},{"_id":"public/css/china-social-icon.css","hash":"2f90442f6d0d289e49c07a85c2dae32cab8b2063","modified":1492951986213},{"_id":"public/css/archive.css","hash":"88005d441d52e143cd2ab4da53b1ec50e22f9ade","modified":1492951986214},{"_id":"public/js/jquery.githubRepoWidget.min.js","hash":"94a141fa474ec5022f7c397b4fd3ff92405ab755","modified":1492951986214},{"_id":"public/js/main.js","hash":"bafb068e72c56db9e66ac148512b1b21cf5547e1","modified":1492951986214},{"_id":"public/js/awesome-toc.min.js","hash":"b4d0f2a33f8340eb2543e8b2cee0dfd745cfb54a","modified":1492951986214},{"_id":"public/js/scale.fix.js","hash":"bbf62458c63fca2535965f9dfaacfbc6bc697e03","modified":1492951986214},{"_id":"public/fonts/china-social/readme.html","hash":"ca335751de11d6ef7721dc907571de39cef6e361","modified":1492951986214},{"_id":"public/css/animate.css","hash":"a2f854fbdc52a5657dd5e2b95cc96c0da32f3ea2","modified":1492951986214},{"_id":"public/css/uno.css","hash":"e302f76eef45c8b42d780b82a8771fa46a1077d2","modified":1492951986214},{"_id":"public/js/jquery.min.js","hash":"06e872300088b9ba8a08427d28ed0efcdf9c6ff5","modified":1492951986215},{"_id":"public/fonts/foundation-icons/foundation-icons.css","hash":"2ad3bb2b4b7d1d67b4d40a9672193638c168c12a","modified":1492951986215},{"_id":"public/fonts/foundation-icons/foundation-icons.svg","hash":"bdca38f453f9935203fe8cd071e97d7f8576e0be","modified":1492951986215},{"_id":"public/images/background-cover.jpg","hash":"08162d5ddd6c081f2713bfd10261e62f0752a600","modified":1492951986276},{"_id":"source/_posts/幸福简易教学指南（二）.md","hash":"36d44dc82e6d70ea5336388a17acb5cf07fb169c","modified":1482734899086},{"_id":"public/2016/12/26/幸福简易教学指南（二）/index.html","hash":"b3e9dc5a0244541ff0901c0579904069a315b71c","modified":1493021275693},{"_id":"public/2016/12/16/hello-world/index.html","hash":"da4d37d4a9f0ee9206cbf499bb2eff8de2508f40","modified":1493021275693}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Fuck the LeetCode(一)","date":"2017-04-23T11:46:39.000Z","_content":"\n### Math\n\n#### 12. Integer to Roman\n\n[原题地址](https://leetcode.com/problems/integer-to-roman/#/description)\n\n这题好玩的是我的解法应该是全网最快的，因为方法很傻\n\n    public class Solution {\n        public String intToRoman(int num) {\n            String[][] c={\n                {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"},\n                {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"},\n                {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"},\n                {\"\",\"M\",\"MM\",\"MMM\"}\n            };\n            StringBuffer roman = new StringBuffer();\n            roman.append(c[3][num / 1000 % 10]);\n            roman.append(c[2][num / 100 % 10]);\n            roman.append(c[1][num / 10 % 10]);\n            roman.append(c[0][num % 10]);\n             \n            return roman.toString();\n        }\n    }\n    \n因为一想反正要识别7个以上的特定字符，干脆就全给你写出来让你自己去匹配，结果就写出了这么蠢的算法，代码很简单不解释了。\n\n#### 13. Roman to Integer\n\n[原题地址](https://leetcode.com/problems/roman-to-integer/#/description)\n\n    public class Solution {\n        public int romanToInt(String s) {\n            int result = 0;\n            boolean isAdd = true;\n            for(int i = s.length() - 1; i >= 0; i--) {\n                if(i == s.length() - 1) result += romanChatToInt(s.charAt(i));\n                else {\n                    if(romanChatToInt(s.charAt(i)) < romanChatToInt(s.charAt(i + 1))) isAdd = false;\n                    else if(romanChatToInt(s.charAt(i)) > romanChatToInt(s.charAt(i + 1))) isAdd = true;\n                    if(isAdd) result += romanChatToInt(s.charAt(i));\n                    else result -= romanChatToInt(s.charAt(i));\n                }\n            }\n            return result;\n        }\n        \n        public int romanChatToInt(char c) {\n            switch(c) {\n                case 'I': return 1;\n                case 'V': return 5;\n                case 'X': return 10;\n                case 'L': return 50;\n                case 'C': return 100;\n                case 'D': return 500;\n                case 'M': return 1000;\n                default: break;\n            }\n            return 0;\n        }\n    }\n    \n这题是上题的兄弟题，思路就是十进制与其他进制的互转加上一个字符转数字的过程，看了一下运算总时间10ms，比最快的快了8倍...真是傻子出奇迹了\n\n### Tree\n\n#### 94. Binary Tree Inorder Traversal\n\n[原题地址](https://leetcode.com/problems/binary-tree-inorder-traversal/#/description)\n\n\tpublic class Solution {\n\t    public List<Integer> inorderTraversal(TreeNode root) {\n\t        List<Integer> l = new ArrayList<Integer>();\n\t        if(root == null) return l;\n\t        inorder(root, l);\n\t        return l;\n\t    }\n\t    public static void inorder(TreeNode root, List l) {\n\t        if(root.left != null) inorder(root.left, l);\n\t        l.add(root.val);\n\t        if(root.right != null) inorder(root.right, l);\n\t    }\n\t}\n\n没啥好说，二叉树中序遍历，inorder那个方法里第二行放在第一行叫先序，放在第三行叫后序\n\n### Backtracking\n\n#### 22. Generate Parentheses\n\n[原题地址](https://leetcode.com/problems/generate-parentheses/#/description)\n\n    class Solution(object):\n        def generateParenthesis(self, n):\n            \"\"\"\n            :type n: int\n            :rtype: List[str]\n            \"\"\"\n            result = []\n            def addMore(item, left, right, n):\n                if left == right == n:\n                    result.append(item)\n                    return\n                if left == n:\n                    addMore(item + \")\", left, right + 1, n)\n                    return\n                if left > right:\n                    addMore(item + \"(\", left + 1, right, n)\n                    addMore(item + \")\", left, right + 1, n)\n                    return\n                else:\n                    addMore(item + \"(\", left + 1, right, n)\n                    return\n            addMore(\"\", 0, 0, n)\n            return result\n            \n这题是回溯算法的基础题了，在我看来回溯算法需要抓住三个点：起始状态，前进规则和结束条件。然后疯狂递归就行了。\n比如这题，起始的状态就是一个空字符串。前进的规则就是：左括号数目大于右括号数目时，加左加右都可以，左括号数目等于括号数时，只能加右，其他情况只能加左。结束条件即左右括号数等于括号数。感觉不难理解。\n\n#### 39. Combination Sum\n\n[原题地址](https://leetcode.com/problems/combination-sum/#/description)\n\n    public class Solution {\n        public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \tint sum = 0;\n            List<List<Integer>> l = new LinkedList<List<Integer>>();\n            LinkedList<Integer> result = new LinkedList<Integer>();\n            LinkedList<LinkedList<Integer>> error = new LinkedList<LinkedList<Integer>>();\n            error.add(new LinkedList<Integer>());\n            while(error.size() > 1 || error.getFirst().size() != candidates.length) {\n                for(int candidate : candidates) {\n                    if(!error.getLast().contains(candidate)) {\n                    \tif(!result.isEmpty()) {\n                    \t\tif(candidate < result.getLast()) {\n                    \t\t\terror.getLast().add(candidate);\n                    \t\t\tcontinue;\n                    \t\t}\n                    \t}\n                        if(sum + candidate < target) {\n                            result.add(candidate);\n                            sum += candidate;\n                            error.add(new LinkedList<Integer>());\n                            break;\n                        } else if(sum + candidate == target) {\n                            result.add(candidate);\n                            LinkedList<Integer> temp = new LinkedList<Integer>();\n                            temp = (LinkedList<Integer>) result.clone();\n                            l.add(temp);\n                            result.removeLast();\n                            error.getLast().add(candidate);\n                        } else { \n                            error.getLast().add(candidate);\n                        }\n                    }\n                    if(error.getLast().size() == candidates.length && error.size() > 1) {\n                        error.removeLast();\n                        int temp = result.removeLast();\n                        sum -= temp;\n                        error.getLast().add(temp);\n                        break;\n                    }\n                }\n            }\n            return l;\n        }\n    }\n    \n上面的代码是我年轻时写的，现在已然看不懂了...\n也懒得去理解了，仔细看了一下题目，发现又是一道回溯题，起始条件是空数组，前进规则是把当前位置之后的所有数都放进去试试，结束条件是数组之和等于target就加进result，大于target就return，以下是新代码\n\n    class Solution(object):\n        def combinationSum(self, candidates, target):\n            \"\"\"\n            :type candidates: List[int]\n            :type target: int\n            :rtype: List[List[int]]\n            \"\"\"\n            result = []\n            length = len(candidates)\n            def search(temp, start, target):\n                if target < 0:\n                    return\n                if target == 0:\n                    result.append(temp)\n                    return\n                for i in range(start, length):\n                    temp.append(candidates[i])\n                    search(list(temp), i, target - candidates[i])\n                    temp.pop()\n            search([], 0, target)\n            return result\n            \n然而不知道为啥运行了223ms...\n\n#### 89. Gray Code\n\n[原题地址](https://leetcode.com/problems/gray-code/#/description)\n\n\tclass Solution:\n\t    '''\n\t    from up to down, then left to right\n\t    \n\t    0   1   11  110\n\t            10  111\n\t                101\n\t                100\n\t                \n\t    start:      [0]\n\t    i = 0:      [0, 1]\n\t    i = 1:      [0, 1, 3, 2]\n\t    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]\n\t    '''\n\t    def grayCode(self, n):\n\t        results = [0]\n\t        for i in range(n):\n\t            results += [x + pow(2, i) for x in reversed(results)]\n\t        return results\n\n格雷码编码方式，笔者很累，就不解释了。\n\n### Dynamic Programming\n\n#### 53. Maximum Subarray\n\n[原题地址](https://leetcode.com/problems/maximum-subarray/#/description)\n\n\tpublic class Solution {\n\t    public int maxSubArray(int[] nums) {\n\t        int localMax = nums[0];\n\t        int globalMax = nums[0];\n\t        for (int i = 1; i < nums.length; i++) {\n\t            localMax = Math.max(localMax + nums[i], nums[i]);\n\t            globalMax = Math.max(globalMax, localMax);\n\t        }\n\t        return globalMax;\n\t    }\n\t}\n\n这是一道动态规划（Dynamic Programming）题，关于DP算法我是看这篇[文章](http://www.hawstein.com/posts/dp-novice-to-advanced.html)学的，目前遇到这种题也是很慌的。\n回到这题，若我们已经解决了前n-1个数的结果，那我们就把那个结果跟第n个数加加看，如果加完后比第n个数大，那就加，否则就以第n个数为新的最大值，当然，这个值只是局部的，我们还要将它与前n-1个数的真实最大值比较，求最大值。\n\n#### 62. Unique Paths\n\n[原题地址](https://leetcode.com/problems/unique-paths/#/description)\n\n这题我去年提交的代码是这个\n\n\tpublic class Solution {\n\t    public int uniquePaths(int m, int n) {\n\t        long result = 1;\n\t        int x = (m < n ? m : n) - 1;\n\t        int sum = m + n - 2;\n\t        for(int i = 0; i < x; i++) {\n\t            result *= (sum - i);\n\t            result /= i + 1;\n\t        }\n\t        return (int)result;\n\t    }\n\t}\n\n因为很显然这是一道组合题，答案是C（m - 1, m + n -2）。不过今天又看了一下，发现可以用DP算法做，于是有了如下代码：\n\n\tclass Solution(object):\n\t    def uniquePaths(self, m, n):\n\t        map = [[1 for j in range(n)] for i in range(m)]\n\t        for i in range(1, m):\n\t            for j in range(1, n):\n\t                map[i][j] = map[i - 1][j] + map[i][j - 1]\n\t        print(map)\n\t        return map[m-1][n-1]\n\n由于机器人只能像右或向下走，那么顶部和左侧每一个到达的方法都只有一种，直行，因此记为1。而其他格子到达的路径数等于其上面的格子与左边的格子到达的路径数之和。\n\n#### 70. Climbing Stairs\n\n[原题地址](https://leetcode.com/problems/climbing-stairs/#/description)\n\n\tpublic class Solution {\n\t    public int climbStairs(int n) {\n\t        if(n <= 1) return 1;\n\t        int fn_1 = 1;\n\t        int fn_2 = 1;\n\t        int fn = fn_1 + fn_2;\n\t        while(n > 2) {\n\t        \tfn_2 = fn_1;\n\t            fn_1 = fn;\n\t            fn = fn_1 + fn_2;\n\t            n--;\n\t        }\n\t        return fn;\n\t    }\n\t}\n\n可以说是DP题的始祖了，传说中的青蛙跳台阶问题（+1s）。思路是跳到第n阶的路径数等于第n-1阶与第n-2阶之和。","source":"_posts/Fuck-the-LeetCode-一.md","raw":"---\ntitle: Fuck the LeetCode(一)\ndate: 2017-04-23 19:46:39\ntags:\n---\n\n### Math\n\n#### 12. Integer to Roman\n\n[原题地址](https://leetcode.com/problems/integer-to-roman/#/description)\n\n这题好玩的是我的解法应该是全网最快的，因为方法很傻\n\n    public class Solution {\n        public String intToRoman(int num) {\n            String[][] c={\n                {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"},\n                {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"},\n                {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"},\n                {\"\",\"M\",\"MM\",\"MMM\"}\n            };\n            StringBuffer roman = new StringBuffer();\n            roman.append(c[3][num / 1000 % 10]);\n            roman.append(c[2][num / 100 % 10]);\n            roman.append(c[1][num / 10 % 10]);\n            roman.append(c[0][num % 10]);\n             \n            return roman.toString();\n        }\n    }\n    \n因为一想反正要识别7个以上的特定字符，干脆就全给你写出来让你自己去匹配，结果就写出了这么蠢的算法，代码很简单不解释了。\n\n#### 13. Roman to Integer\n\n[原题地址](https://leetcode.com/problems/roman-to-integer/#/description)\n\n    public class Solution {\n        public int romanToInt(String s) {\n            int result = 0;\n            boolean isAdd = true;\n            for(int i = s.length() - 1; i >= 0; i--) {\n                if(i == s.length() - 1) result += romanChatToInt(s.charAt(i));\n                else {\n                    if(romanChatToInt(s.charAt(i)) < romanChatToInt(s.charAt(i + 1))) isAdd = false;\n                    else if(romanChatToInt(s.charAt(i)) > romanChatToInt(s.charAt(i + 1))) isAdd = true;\n                    if(isAdd) result += romanChatToInt(s.charAt(i));\n                    else result -= romanChatToInt(s.charAt(i));\n                }\n            }\n            return result;\n        }\n        \n        public int romanChatToInt(char c) {\n            switch(c) {\n                case 'I': return 1;\n                case 'V': return 5;\n                case 'X': return 10;\n                case 'L': return 50;\n                case 'C': return 100;\n                case 'D': return 500;\n                case 'M': return 1000;\n                default: break;\n            }\n            return 0;\n        }\n    }\n    \n这题是上题的兄弟题，思路就是十进制与其他进制的互转加上一个字符转数字的过程，看了一下运算总时间10ms，比最快的快了8倍...真是傻子出奇迹了\n\n### Tree\n\n#### 94. Binary Tree Inorder Traversal\n\n[原题地址](https://leetcode.com/problems/binary-tree-inorder-traversal/#/description)\n\n\tpublic class Solution {\n\t    public List<Integer> inorderTraversal(TreeNode root) {\n\t        List<Integer> l = new ArrayList<Integer>();\n\t        if(root == null) return l;\n\t        inorder(root, l);\n\t        return l;\n\t    }\n\t    public static void inorder(TreeNode root, List l) {\n\t        if(root.left != null) inorder(root.left, l);\n\t        l.add(root.val);\n\t        if(root.right != null) inorder(root.right, l);\n\t    }\n\t}\n\n没啥好说，二叉树中序遍历，inorder那个方法里第二行放在第一行叫先序，放在第三行叫后序\n\n### Backtracking\n\n#### 22. Generate Parentheses\n\n[原题地址](https://leetcode.com/problems/generate-parentheses/#/description)\n\n    class Solution(object):\n        def generateParenthesis(self, n):\n            \"\"\"\n            :type n: int\n            :rtype: List[str]\n            \"\"\"\n            result = []\n            def addMore(item, left, right, n):\n                if left == right == n:\n                    result.append(item)\n                    return\n                if left == n:\n                    addMore(item + \")\", left, right + 1, n)\n                    return\n                if left > right:\n                    addMore(item + \"(\", left + 1, right, n)\n                    addMore(item + \")\", left, right + 1, n)\n                    return\n                else:\n                    addMore(item + \"(\", left + 1, right, n)\n                    return\n            addMore(\"\", 0, 0, n)\n            return result\n            \n这题是回溯算法的基础题了，在我看来回溯算法需要抓住三个点：起始状态，前进规则和结束条件。然后疯狂递归就行了。\n比如这题，起始的状态就是一个空字符串。前进的规则就是：左括号数目大于右括号数目时，加左加右都可以，左括号数目等于括号数时，只能加右，其他情况只能加左。结束条件即左右括号数等于括号数。感觉不难理解。\n\n#### 39. Combination Sum\n\n[原题地址](https://leetcode.com/problems/combination-sum/#/description)\n\n    public class Solution {\n        public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        \tint sum = 0;\n            List<List<Integer>> l = new LinkedList<List<Integer>>();\n            LinkedList<Integer> result = new LinkedList<Integer>();\n            LinkedList<LinkedList<Integer>> error = new LinkedList<LinkedList<Integer>>();\n            error.add(new LinkedList<Integer>());\n            while(error.size() > 1 || error.getFirst().size() != candidates.length) {\n                for(int candidate : candidates) {\n                    if(!error.getLast().contains(candidate)) {\n                    \tif(!result.isEmpty()) {\n                    \t\tif(candidate < result.getLast()) {\n                    \t\t\terror.getLast().add(candidate);\n                    \t\t\tcontinue;\n                    \t\t}\n                    \t}\n                        if(sum + candidate < target) {\n                            result.add(candidate);\n                            sum += candidate;\n                            error.add(new LinkedList<Integer>());\n                            break;\n                        } else if(sum + candidate == target) {\n                            result.add(candidate);\n                            LinkedList<Integer> temp = new LinkedList<Integer>();\n                            temp = (LinkedList<Integer>) result.clone();\n                            l.add(temp);\n                            result.removeLast();\n                            error.getLast().add(candidate);\n                        } else { \n                            error.getLast().add(candidate);\n                        }\n                    }\n                    if(error.getLast().size() == candidates.length && error.size() > 1) {\n                        error.removeLast();\n                        int temp = result.removeLast();\n                        sum -= temp;\n                        error.getLast().add(temp);\n                        break;\n                    }\n                }\n            }\n            return l;\n        }\n    }\n    \n上面的代码是我年轻时写的，现在已然看不懂了...\n也懒得去理解了，仔细看了一下题目，发现又是一道回溯题，起始条件是空数组，前进规则是把当前位置之后的所有数都放进去试试，结束条件是数组之和等于target就加进result，大于target就return，以下是新代码\n\n    class Solution(object):\n        def combinationSum(self, candidates, target):\n            \"\"\"\n            :type candidates: List[int]\n            :type target: int\n            :rtype: List[List[int]]\n            \"\"\"\n            result = []\n            length = len(candidates)\n            def search(temp, start, target):\n                if target < 0:\n                    return\n                if target == 0:\n                    result.append(temp)\n                    return\n                for i in range(start, length):\n                    temp.append(candidates[i])\n                    search(list(temp), i, target - candidates[i])\n                    temp.pop()\n            search([], 0, target)\n            return result\n            \n然而不知道为啥运行了223ms...\n\n#### 89. Gray Code\n\n[原题地址](https://leetcode.com/problems/gray-code/#/description)\n\n\tclass Solution:\n\t    '''\n\t    from up to down, then left to right\n\t    \n\t    0   1   11  110\n\t            10  111\n\t                101\n\t                100\n\t                \n\t    start:      [0]\n\t    i = 0:      [0, 1]\n\t    i = 1:      [0, 1, 3, 2]\n\t    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]\n\t    '''\n\t    def grayCode(self, n):\n\t        results = [0]\n\t        for i in range(n):\n\t            results += [x + pow(2, i) for x in reversed(results)]\n\t        return results\n\n格雷码编码方式，笔者很累，就不解释了。\n\n### Dynamic Programming\n\n#### 53. Maximum Subarray\n\n[原题地址](https://leetcode.com/problems/maximum-subarray/#/description)\n\n\tpublic class Solution {\n\t    public int maxSubArray(int[] nums) {\n\t        int localMax = nums[0];\n\t        int globalMax = nums[0];\n\t        for (int i = 1; i < nums.length; i++) {\n\t            localMax = Math.max(localMax + nums[i], nums[i]);\n\t            globalMax = Math.max(globalMax, localMax);\n\t        }\n\t        return globalMax;\n\t    }\n\t}\n\n这是一道动态规划（Dynamic Programming）题，关于DP算法我是看这篇[文章](http://www.hawstein.com/posts/dp-novice-to-advanced.html)学的，目前遇到这种题也是很慌的。\n回到这题，若我们已经解决了前n-1个数的结果，那我们就把那个结果跟第n个数加加看，如果加完后比第n个数大，那就加，否则就以第n个数为新的最大值，当然，这个值只是局部的，我们还要将它与前n-1个数的真实最大值比较，求最大值。\n\n#### 62. Unique Paths\n\n[原题地址](https://leetcode.com/problems/unique-paths/#/description)\n\n这题我去年提交的代码是这个\n\n\tpublic class Solution {\n\t    public int uniquePaths(int m, int n) {\n\t        long result = 1;\n\t        int x = (m < n ? m : n) - 1;\n\t        int sum = m + n - 2;\n\t        for(int i = 0; i < x; i++) {\n\t            result *= (sum - i);\n\t            result /= i + 1;\n\t        }\n\t        return (int)result;\n\t    }\n\t}\n\n因为很显然这是一道组合题，答案是C（m - 1, m + n -2）。不过今天又看了一下，发现可以用DP算法做，于是有了如下代码：\n\n\tclass Solution(object):\n\t    def uniquePaths(self, m, n):\n\t        map = [[1 for j in range(n)] for i in range(m)]\n\t        for i in range(1, m):\n\t            for j in range(1, n):\n\t                map[i][j] = map[i - 1][j] + map[i][j - 1]\n\t        print(map)\n\t        return map[m-1][n-1]\n\n由于机器人只能像右或向下走，那么顶部和左侧每一个到达的方法都只有一种，直行，因此记为1。而其他格子到达的路径数等于其上面的格子与左边的格子到达的路径数之和。\n\n#### 70. Climbing Stairs\n\n[原题地址](https://leetcode.com/problems/climbing-stairs/#/description)\n\n\tpublic class Solution {\n\t    public int climbStairs(int n) {\n\t        if(n <= 1) return 1;\n\t        int fn_1 = 1;\n\t        int fn_2 = 1;\n\t        int fn = fn_1 + fn_2;\n\t        while(n > 2) {\n\t        \tfn_2 = fn_1;\n\t            fn_1 = fn;\n\t            fn = fn_1 + fn_2;\n\t            n--;\n\t        }\n\t        return fn;\n\t    }\n\t}\n\n可以说是DP题的始祖了，传说中的青蛙跳台阶问题（+1s）。思路是跳到第n阶的路径数等于第n-1阶与第n-2阶之和。","slug":"Fuck-the-LeetCode-一","published":1,"updated":"2017-05-03T09:17:49.441Z","_id":"cj1up2avy0000u4urr1pfq8ua","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><h4 id=\"12-Integer-to-Roman\"><a href=\"#12-Integer-to-Roman\" class=\"headerlink\" title=\"12. Integer to Roman\"></a>12. Integer to Roman</h4><p><a href=\"https://leetcode.com/problems/integer-to-roman/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<p>这题好玩的是我的解法应该是全网最快的，因为方法很傻</p>\n<pre><code>public class Solution {\n    public String intToRoman(int num) {\n        String[][] c={\n            {&quot;&quot;,&quot;I&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;,&quot;V&quot;,&quot;VI&quot;,&quot;VII&quot;,&quot;VIII&quot;,&quot;IX&quot;},\n            {&quot;&quot;,&quot;X&quot;,&quot;XX&quot;,&quot;XXX&quot;,&quot;XL&quot;,&quot;L&quot;,&quot;LX&quot;,&quot;LXX&quot;,&quot;LXXX&quot;,&quot;XC&quot;},\n            {&quot;&quot;,&quot;C&quot;,&quot;CC&quot;,&quot;CCC&quot;,&quot;CD&quot;,&quot;D&quot;,&quot;DC&quot;,&quot;DCC&quot;,&quot;DCCC&quot;,&quot;CM&quot;},\n            {&quot;&quot;,&quot;M&quot;,&quot;MM&quot;,&quot;MMM&quot;}\n        };\n        StringBuffer roman = new StringBuffer();\n        roman.append(c[3][num / 1000 % 10]);\n        roman.append(c[2][num / 100 % 10]);\n        roman.append(c[1][num / 10 % 10]);\n        roman.append(c[0][num % 10]);\n\n        return roman.toString();\n    }\n}\n</code></pre><p>因为一想反正要识别7个以上的特定字符，干脆就全给你写出来让你自己去匹配，结果就写出了这么蠢的算法，代码很简单不解释了。</p>\n<h4 id=\"13-Roman-to-Integer\"><a href=\"#13-Roman-to-Integer\" class=\"headerlink\" title=\"13. Roman to Integer\"></a>13. Roman to Integer</h4><p><a href=\"https://leetcode.com/problems/roman-to-integer/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int romanToInt(String s) {\n        int result = 0;\n        boolean isAdd = true;\n        for(int i = s.length() - 1; i &gt;= 0; i--) {\n            if(i == s.length() - 1) result += romanChatToInt(s.charAt(i));\n            else {\n                if(romanChatToInt(s.charAt(i)) &lt; romanChatToInt(s.charAt(i + 1))) isAdd = false;\n                else if(romanChatToInt(s.charAt(i)) &gt; romanChatToInt(s.charAt(i + 1))) isAdd = true;\n                if(isAdd) result += romanChatToInt(s.charAt(i));\n                else result -= romanChatToInt(s.charAt(i));\n            }\n        }\n        return result;\n    }\n\n    public int romanChatToInt(char c) {\n        switch(c) {\n            case &apos;I&apos;: return 1;\n            case &apos;V&apos;: return 5;\n            case &apos;X&apos;: return 10;\n            case &apos;L&apos;: return 50;\n            case &apos;C&apos;: return 100;\n            case &apos;D&apos;: return 500;\n            case &apos;M&apos;: return 1000;\n            default: break;\n        }\n        return 0;\n    }\n}\n</code></pre><p>这题是上题的兄弟题，思路就是十进制与其他进制的互转加上一个字符转数字的过程，看了一下运算总时间10ms，比最快的快了8倍…真是傻子出奇迹了</p>\n<h3 id=\"Tree\"><a href=\"#Tree\" class=\"headerlink\" title=\"Tree\"></a>Tree</h3><h4 id=\"94-Binary-Tree-Inorder-Traversal\"><a href=\"#94-Binary-Tree-Inorder-Traversal\" class=\"headerlink\" title=\"94. Binary Tree Inorder Traversal\"></a>94. Binary Tree Inorder Traversal</h4><p><a href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>public class Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();\n        if(root == null) return l;\n        inorder(root, l);\n        return l;\n    }\n    public static void inorder(TreeNode root, List l) {\n        if(root.left != null) inorder(root.left, l);\n        l.add(root.val);\n        if(root.right != null) inorder(root.right, l);\n    }\n}\n</code></pre><p>没啥好说，二叉树中序遍历，inorder那个方法里第二行放在第一行叫先序，放在第三行叫后序</p>\n<h3 id=\"Backtracking\"><a href=\"#Backtracking\" class=\"headerlink\" title=\"Backtracking\"></a>Backtracking</h3><h4 id=\"22-Generate-Parentheses\"><a href=\"#22-Generate-Parentheses\" class=\"headerlink\" title=\"22. Generate Parentheses\"></a>22. Generate Parentheses</h4><p><a href=\"https://leetcode.com/problems/generate-parentheses/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>class Solution(object):\n    def generateParenthesis(self, n):\n        &quot;&quot;&quot;\n        :type n: int\n        :rtype: List[str]\n        &quot;&quot;&quot;\n        result = []\n        def addMore(item, left, right, n):\n            if left == right == n:\n                result.append(item)\n                return\n            if left == n:\n                addMore(item + &quot;)&quot;, left, right + 1, n)\n                return\n            if left &gt; right:\n                addMore(item + &quot;(&quot;, left + 1, right, n)\n                addMore(item + &quot;)&quot;, left, right + 1, n)\n                return\n            else:\n                addMore(item + &quot;(&quot;, left + 1, right, n)\n                return\n        addMore(&quot;&quot;, 0, 0, n)\n        return result\n</code></pre><p>这题是回溯算法的基础题了，在我看来回溯算法需要抓住三个点：起始状态，前进规则和结束条件。然后疯狂递归就行了。<br>比如这题，起始的状态就是一个空字符串。前进的规则就是：左括号数目大于右括号数目时，加左加右都可以，左括号数目等于括号数时，只能加右，其他情况只能加左。结束条件即左右括号数等于括号数。感觉不难理解。</p>\n<h4 id=\"39-Combination-Sum\"><a href=\"#39-Combination-Sum\" class=\"headerlink\" title=\"39. Combination Sum\"></a>39. Combination Sum</h4><p><a href=\"https://leetcode.com/problems/combination-sum/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>public class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {\n        int sum = 0;\n        List&lt;List&lt;Integer&gt;&gt; l = new LinkedList&lt;List&lt;Integer&gt;&gt;();\n        LinkedList&lt;Integer&gt; result = new LinkedList&lt;Integer&gt;();\n        LinkedList&lt;LinkedList&lt;Integer&gt;&gt; error = new LinkedList&lt;LinkedList&lt;Integer&gt;&gt;();\n        error.add(new LinkedList&lt;Integer&gt;());\n        while(error.size() &gt; 1 || error.getFirst().size() != candidates.length) {\n            for(int candidate : candidates) {\n                if(!error.getLast().contains(candidate)) {\n                    if(!result.isEmpty()) {\n                        if(candidate &lt; result.getLast()) {\n                            error.getLast().add(candidate);\n                            continue;\n                        }\n                    }\n                    if(sum + candidate &lt; target) {\n                        result.add(candidate);\n                        sum += candidate;\n                        error.add(new LinkedList&lt;Integer&gt;());\n                        break;\n                    } else if(sum + candidate == target) {\n                        result.add(candidate);\n                        LinkedList&lt;Integer&gt; temp = new LinkedList&lt;Integer&gt;();\n                        temp = (LinkedList&lt;Integer&gt;) result.clone();\n                        l.add(temp);\n                        result.removeLast();\n                        error.getLast().add(candidate);\n                    } else { \n                        error.getLast().add(candidate);\n                    }\n                }\n                if(error.getLast().size() == candidates.length &amp;&amp; error.size() &gt; 1) {\n                    error.removeLast();\n                    int temp = result.removeLast();\n                    sum -= temp;\n                    error.getLast().add(temp);\n                    break;\n                }\n            }\n        }\n        return l;\n    }\n}\n</code></pre><p>上面的代码是我年轻时写的，现在已然看不懂了…<br>也懒得去理解了，仔细看了一下题目，发现又是一道回溯题，起始条件是空数组，前进规则是把当前位置之后的所有数都放进去试试，结束条件是数组之和等于target就加进result，大于target就return，以下是新代码</p>\n<pre><code>class Solution(object):\n    def combinationSum(self, candidates, target):\n        &quot;&quot;&quot;\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        &quot;&quot;&quot;\n        result = []\n        length = len(candidates)\n        def search(temp, start, target):\n            if target &lt; 0:\n                return\n            if target == 0:\n                result.append(temp)\n                return\n            for i in range(start, length):\n                temp.append(candidates[i])\n                search(list(temp), i, target - candidates[i])\n                temp.pop()\n        search([], 0, target)\n        return result\n</code></pre><p>然而不知道为啥运行了223ms…</p>\n<h4 id=\"89-Gray-Code\"><a href=\"#89-Gray-Code\" class=\"headerlink\" title=\"89. Gray Code\"></a>89. Gray Code</h4><p><a href=\"https://leetcode.com/problems/gray-code/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>class Solution:\n    &apos;&apos;&apos;\n    from up to down, then left to right\n\n    0   1   11  110\n            10  111\n                101\n                100\n\n    start:      [0]\n    i = 0:      [0, 1]\n    i = 1:      [0, 1, 3, 2]\n    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]\n    &apos;&apos;&apos;\n    def grayCode(self, n):\n        results = [0]\n        for i in range(n):\n            results += [x + pow(2, i) for x in reversed(results)]\n        return results\n</code></pre><p>格雷码编码方式，笔者很累，就不解释了。</p>\n<h3 id=\"Dynamic-Programming\"><a href=\"#Dynamic-Programming\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h3><h4 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53. Maximum Subarray\"></a>53. Maximum Subarray</h4><p><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int maxSubArray(int[] nums) {\n        int localMax = nums[0];\n        int globalMax = nums[0];\n        for (int i = 1; i &lt; nums.length; i++) {\n            localMax = Math.max(localMax + nums[i], nums[i]);\n            globalMax = Math.max(globalMax, localMax);\n        }\n        return globalMax;\n    }\n}\n</code></pre><p>这是一道动态规划（Dynamic Programming）题，关于DP算法我是看这篇<a href=\"http://www.hawstein.com/posts/dp-novice-to-advanced.html\" target=\"_blank\" rel=\"external\">文章</a>学的，目前遇到这种题也是很慌的。<br>回到这题，若我们已经解决了前n-1个数的结果，那我们就把那个结果跟第n个数加加看，如果加完后比第n个数大，那就加，否则就以第n个数为新的最大值，当然，这个值只是局部的，我们还要将它与前n-1个数的真实最大值比较，求最大值。</p>\n<h4 id=\"62-Unique-Paths\"><a href=\"#62-Unique-Paths\" class=\"headerlink\" title=\"62. Unique Paths\"></a>62. Unique Paths</h4><p><a href=\"https://leetcode.com/problems/unique-paths/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<p>这题我去年提交的代码是这个</p>\n<pre><code>public class Solution {\n    public int uniquePaths(int m, int n) {\n        long result = 1;\n        int x = (m &lt; n ? m : n) - 1;\n        int sum = m + n - 2;\n        for(int i = 0; i &lt; x; i++) {\n            result *= (sum - i);\n            result /= i + 1;\n        }\n        return (int)result;\n    }\n}\n</code></pre><p>因为很显然这是一道组合题，答案是C（m - 1, m + n -2）。不过今天又看了一下，发现可以用DP算法做，于是有了如下代码：</p>\n<pre><code>class Solution(object):\n    def uniquePaths(self, m, n):\n        map = [[1 for j in range(n)] for i in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                map[i][j] = map[i - 1][j] + map[i][j - 1]\n        print(map)\n        return map[m-1][n-1]\n</code></pre><p>由于机器人只能像右或向下走，那么顶部和左侧每一个到达的方法都只有一种，直行，因此记为1。而其他格子到达的路径数等于其上面的格子与左边的格子到达的路径数之和。</p>\n<h4 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70. Climbing Stairs\"></a>70. Climbing Stairs</h4><p><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\" target=\"_blank\" rel=\"external\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int climbStairs(int n) {\n        if(n &lt;= 1) return 1;\n        int fn_1 = 1;\n        int fn_2 = 1;\n        int fn = fn_1 + fn_2;\n        while(n &gt; 2) {\n            fn_2 = fn_1;\n            fn_1 = fn;\n            fn = fn_1 + fn_2;\n            n--;\n        }\n        return fn;\n    }\n}\n</code></pre><p>可以说是DP题的始祖了，传说中的青蛙跳台阶问题（+1s）。思路是跳到第n阶的路径数等于第n-1阶与第n-2阶之和。</p>\n","excerpt":"","more":"<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><h4 id=\"12-Integer-to-Roman\"><a href=\"#12-Integer-to-Roman\" class=\"headerlink\" title=\"12. Integer to Roman\"></a>12. Integer to Roman</h4><p><a href=\"https://leetcode.com/problems/integer-to-roman/#/description\">原题地址</a></p>\n<p>这题好玩的是我的解法应该是全网最快的，因为方法很傻</p>\n<pre><code>public class Solution {\n    public String intToRoman(int num) {\n        String[][] c={\n            {&quot;&quot;,&quot;I&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;,&quot;V&quot;,&quot;VI&quot;,&quot;VII&quot;,&quot;VIII&quot;,&quot;IX&quot;},\n            {&quot;&quot;,&quot;X&quot;,&quot;XX&quot;,&quot;XXX&quot;,&quot;XL&quot;,&quot;L&quot;,&quot;LX&quot;,&quot;LXX&quot;,&quot;LXXX&quot;,&quot;XC&quot;},\n            {&quot;&quot;,&quot;C&quot;,&quot;CC&quot;,&quot;CCC&quot;,&quot;CD&quot;,&quot;D&quot;,&quot;DC&quot;,&quot;DCC&quot;,&quot;DCCC&quot;,&quot;CM&quot;},\n            {&quot;&quot;,&quot;M&quot;,&quot;MM&quot;,&quot;MMM&quot;}\n        };\n        StringBuffer roman = new StringBuffer();\n        roman.append(c[3][num / 1000 % 10]);\n        roman.append(c[2][num / 100 % 10]);\n        roman.append(c[1][num / 10 % 10]);\n        roman.append(c[0][num % 10]);\n\n        return roman.toString();\n    }\n}\n</code></pre><p>因为一想反正要识别7个以上的特定字符，干脆就全给你写出来让你自己去匹配，结果就写出了这么蠢的算法，代码很简单不解释了。</p>\n<h4 id=\"13-Roman-to-Integer\"><a href=\"#13-Roman-to-Integer\" class=\"headerlink\" title=\"13. Roman to Integer\"></a>13. Roman to Integer</h4><p><a href=\"https://leetcode.com/problems/roman-to-integer/#/description\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int romanToInt(String s) {\n        int result = 0;\n        boolean isAdd = true;\n        for(int i = s.length() - 1; i &gt;= 0; i--) {\n            if(i == s.length() - 1) result += romanChatToInt(s.charAt(i));\n            else {\n                if(romanChatToInt(s.charAt(i)) &lt; romanChatToInt(s.charAt(i + 1))) isAdd = false;\n                else if(romanChatToInt(s.charAt(i)) &gt; romanChatToInt(s.charAt(i + 1))) isAdd = true;\n                if(isAdd) result += romanChatToInt(s.charAt(i));\n                else result -= romanChatToInt(s.charAt(i));\n            }\n        }\n        return result;\n    }\n\n    public int romanChatToInt(char c) {\n        switch(c) {\n            case &apos;I&apos;: return 1;\n            case &apos;V&apos;: return 5;\n            case &apos;X&apos;: return 10;\n            case &apos;L&apos;: return 50;\n            case &apos;C&apos;: return 100;\n            case &apos;D&apos;: return 500;\n            case &apos;M&apos;: return 1000;\n            default: break;\n        }\n        return 0;\n    }\n}\n</code></pre><p>这题是上题的兄弟题，思路就是十进制与其他进制的互转加上一个字符转数字的过程，看了一下运算总时间10ms，比最快的快了8倍…真是傻子出奇迹了</p>\n<h3 id=\"Tree\"><a href=\"#Tree\" class=\"headerlink\" title=\"Tree\"></a>Tree</h3><h4 id=\"94-Binary-Tree-Inorder-Traversal\"><a href=\"#94-Binary-Tree-Inorder-Traversal\" class=\"headerlink\" title=\"94. Binary Tree Inorder Traversal\"></a>94. Binary Tree Inorder Traversal</h4><p><a href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/#/description\">原题地址</a></p>\n<pre><code>public class Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();\n        if(root == null) return l;\n        inorder(root, l);\n        return l;\n    }\n    public static void inorder(TreeNode root, List l) {\n        if(root.left != null) inorder(root.left, l);\n        l.add(root.val);\n        if(root.right != null) inorder(root.right, l);\n    }\n}\n</code></pre><p>没啥好说，二叉树中序遍历，inorder那个方法里第二行放在第一行叫先序，放在第三行叫后序</p>\n<h3 id=\"Backtracking\"><a href=\"#Backtracking\" class=\"headerlink\" title=\"Backtracking\"></a>Backtracking</h3><h4 id=\"22-Generate-Parentheses\"><a href=\"#22-Generate-Parentheses\" class=\"headerlink\" title=\"22. Generate Parentheses\"></a>22. Generate Parentheses</h4><p><a href=\"https://leetcode.com/problems/generate-parentheses/#/description\">原题地址</a></p>\n<pre><code>class Solution(object):\n    def generateParenthesis(self, n):\n        &quot;&quot;&quot;\n        :type n: int\n        :rtype: List[str]\n        &quot;&quot;&quot;\n        result = []\n        def addMore(item, left, right, n):\n            if left == right == n:\n                result.append(item)\n                return\n            if left == n:\n                addMore(item + &quot;)&quot;, left, right + 1, n)\n                return\n            if left &gt; right:\n                addMore(item + &quot;(&quot;, left + 1, right, n)\n                addMore(item + &quot;)&quot;, left, right + 1, n)\n                return\n            else:\n                addMore(item + &quot;(&quot;, left + 1, right, n)\n                return\n        addMore(&quot;&quot;, 0, 0, n)\n        return result\n</code></pre><p>这题是回溯算法的基础题了，在我看来回溯算法需要抓住三个点：起始状态，前进规则和结束条件。然后疯狂递归就行了。<br>比如这题，起始的状态就是一个空字符串。前进的规则就是：左括号数目大于右括号数目时，加左加右都可以，左括号数目等于括号数时，只能加右，其他情况只能加左。结束条件即左右括号数等于括号数。感觉不难理解。</p>\n<h4 id=\"39-Combination-Sum\"><a href=\"#39-Combination-Sum\" class=\"headerlink\" title=\"39. Combination Sum\"></a>39. Combination Sum</h4><p><a href=\"https://leetcode.com/problems/combination-sum/#/description\">原题地址</a></p>\n<pre><code>public class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {\n        int sum = 0;\n        List&lt;List&lt;Integer&gt;&gt; l = new LinkedList&lt;List&lt;Integer&gt;&gt;();\n        LinkedList&lt;Integer&gt; result = new LinkedList&lt;Integer&gt;();\n        LinkedList&lt;LinkedList&lt;Integer&gt;&gt; error = new LinkedList&lt;LinkedList&lt;Integer&gt;&gt;();\n        error.add(new LinkedList&lt;Integer&gt;());\n        while(error.size() &gt; 1 || error.getFirst().size() != candidates.length) {\n            for(int candidate : candidates) {\n                if(!error.getLast().contains(candidate)) {\n                    if(!result.isEmpty()) {\n                        if(candidate &lt; result.getLast()) {\n                            error.getLast().add(candidate);\n                            continue;\n                        }\n                    }\n                    if(sum + candidate &lt; target) {\n                        result.add(candidate);\n                        sum += candidate;\n                        error.add(new LinkedList&lt;Integer&gt;());\n                        break;\n                    } else if(sum + candidate == target) {\n                        result.add(candidate);\n                        LinkedList&lt;Integer&gt; temp = new LinkedList&lt;Integer&gt;();\n                        temp = (LinkedList&lt;Integer&gt;) result.clone();\n                        l.add(temp);\n                        result.removeLast();\n                        error.getLast().add(candidate);\n                    } else { \n                        error.getLast().add(candidate);\n                    }\n                }\n                if(error.getLast().size() == candidates.length &amp;&amp; error.size() &gt; 1) {\n                    error.removeLast();\n                    int temp = result.removeLast();\n                    sum -= temp;\n                    error.getLast().add(temp);\n                    break;\n                }\n            }\n        }\n        return l;\n    }\n}\n</code></pre><p>上面的代码是我年轻时写的，现在已然看不懂了…<br>也懒得去理解了，仔细看了一下题目，发现又是一道回溯题，起始条件是空数组，前进规则是把当前位置之后的所有数都放进去试试，结束条件是数组之和等于target就加进result，大于target就return，以下是新代码</p>\n<pre><code>class Solution(object):\n    def combinationSum(self, candidates, target):\n        &quot;&quot;&quot;\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        &quot;&quot;&quot;\n        result = []\n        length = len(candidates)\n        def search(temp, start, target):\n            if target &lt; 0:\n                return\n            if target == 0:\n                result.append(temp)\n                return\n            for i in range(start, length):\n                temp.append(candidates[i])\n                search(list(temp), i, target - candidates[i])\n                temp.pop()\n        search([], 0, target)\n        return result\n</code></pre><p>然而不知道为啥运行了223ms…</p>\n<h4 id=\"89-Gray-Code\"><a href=\"#89-Gray-Code\" class=\"headerlink\" title=\"89. Gray Code\"></a>89. Gray Code</h4><p><a href=\"https://leetcode.com/problems/gray-code/#/description\">原题地址</a></p>\n<pre><code>class Solution:\n    &apos;&apos;&apos;\n    from up to down, then left to right\n\n    0   1   11  110\n            10  111\n                101\n                100\n\n    start:      [0]\n    i = 0:      [0, 1]\n    i = 1:      [0, 1, 3, 2]\n    i = 2:      [0, 1, 3, 2, 6, 7, 5, 4]\n    &apos;&apos;&apos;\n    def grayCode(self, n):\n        results = [0]\n        for i in range(n):\n            results += [x + pow(2, i) for x in reversed(results)]\n        return results\n</code></pre><p>格雷码编码方式，笔者很累，就不解释了。</p>\n<h3 id=\"Dynamic-Programming\"><a href=\"#Dynamic-Programming\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h3><h4 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53. Maximum Subarray\"></a>53. Maximum Subarray</h4><p><a href=\"https://leetcode.com/problems/maximum-subarray/#/description\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int maxSubArray(int[] nums) {\n        int localMax = nums[0];\n        int globalMax = nums[0];\n        for (int i = 1; i &lt; nums.length; i++) {\n            localMax = Math.max(localMax + nums[i], nums[i]);\n            globalMax = Math.max(globalMax, localMax);\n        }\n        return globalMax;\n    }\n}\n</code></pre><p>这是一道动态规划（Dynamic Programming）题，关于DP算法我是看这篇<a href=\"http://www.hawstein.com/posts/dp-novice-to-advanced.html\">文章</a>学的，目前遇到这种题也是很慌的。<br>回到这题，若我们已经解决了前n-1个数的结果，那我们就把那个结果跟第n个数加加看，如果加完后比第n个数大，那就加，否则就以第n个数为新的最大值，当然，这个值只是局部的，我们还要将它与前n-1个数的真实最大值比较，求最大值。</p>\n<h4 id=\"62-Unique-Paths\"><a href=\"#62-Unique-Paths\" class=\"headerlink\" title=\"62. Unique Paths\"></a>62. Unique Paths</h4><p><a href=\"https://leetcode.com/problems/unique-paths/#/description\">原题地址</a></p>\n<p>这题我去年提交的代码是这个</p>\n<pre><code>public class Solution {\n    public int uniquePaths(int m, int n) {\n        long result = 1;\n        int x = (m &lt; n ? m : n) - 1;\n        int sum = m + n - 2;\n        for(int i = 0; i &lt; x; i++) {\n            result *= (sum - i);\n            result /= i + 1;\n        }\n        return (int)result;\n    }\n}\n</code></pre><p>因为很显然这是一道组合题，答案是C（m - 1, m + n -2）。不过今天又看了一下，发现可以用DP算法做，于是有了如下代码：</p>\n<pre><code>class Solution(object):\n    def uniquePaths(self, m, n):\n        map = [[1 for j in range(n)] for i in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                map[i][j] = map[i - 1][j] + map[i][j - 1]\n        print(map)\n        return map[m-1][n-1]\n</code></pre><p>由于机器人只能像右或向下走，那么顶部和左侧每一个到达的方法都只有一种，直行，因此记为1。而其他格子到达的路径数等于其上面的格子与左边的格子到达的路径数之和。</p>\n<h4 id=\"70-Climbing-Stairs\"><a href=\"#70-Climbing-Stairs\" class=\"headerlink\" title=\"70. Climbing Stairs\"></a>70. Climbing Stairs</h4><p><a href=\"https://leetcode.com/problems/climbing-stairs/#/description\">原题地址</a></p>\n<pre><code>public class Solution {\n    public int climbStairs(int n) {\n        if(n &lt;= 1) return 1;\n        int fn_1 = 1;\n        int fn_2 = 1;\n        int fn = fn_1 + fn_2;\n        while(n &gt; 2) {\n            fn_2 = fn_1;\n            fn_1 = fn;\n            fn = fn_1 + fn_2;\n            n--;\n        }\n        return fn;\n    }\n}\n</code></pre><p>可以说是DP题的始祖了，传说中的青蛙跳台阶问题（+1s）。思路是跳到第n阶的路径数等于第n-1阶与第n-2阶之和。</p>\n"},{"title":"2017年OKR","date":"2017-02-27T14:02:12.000Z","_content":"\n> ***社交平台不就是用来立flag的吗？ —— 沃兹·基硕德***\n\n### 扯在前面\n\n众所周知, OKR（Object Key Results）是一套指数型组织管理的方式，用来取代原有的KPI，能极大提高团队凝聚力与创造力。前一段时间一直想给今年列个计划，却无从下手，毕竟flag天天立，真正实现的很少，若是细化计划貌似也起不到什么好效果，只会在deadline时发现完不成了，就一拖再拖，啥也干不成。前几天看了本指数型组织相关的书，发现他喵的这套理论用在个人身上也是妥妥的啊，遂萌生了订几个OKR的想法，之后会阶段性地反馈成果（又一个flag）。\n\n### OKR\n\n#### 一、Fuck The Leetcode\n\n1. 完成100题并输出坑题文档\n2. 完成200题并输出坑题文档\n3. 完成300题并输出坑题文档\n4. 完成400题并输出坑题文档\n5. 完成500题并输出坑题文档\n\n（注1：语言不限，上传到github）\n（注2：他喵的按照leetcode出题速度年底600都有了）\n\n#### 二、掌握前端高级技能\n\n1. 读完bootstrap所有源码\n2. 搭建博客框架，不使用vue为佳（使用vue完成度80%）\n3. 编写任意前端小游戏，要求流畅无bug\n\n#### 三、编程基础技能树\n\n1. 做完《算法导论》课后题\n2. 在linux上部署整个架构系统\n3. 使用屁眼通红（划掉）python编写一个爬虫，爬取知乎个人关注的收藏夹下所有收藏的回答并存储数据库（mongo）\n4. 使用go编写正则表达式引擎\n\n#### 四、个人生活\n\n1. 体重140\n2. 戒烟\n3. 一年断片不超过三次\n4. 跑马拉松\n\n### 记录\n\n之后完成一个KR会在这里记录日期","source":"_posts/2017年OKR.md","raw":"---\ntitle: 2017年OKR\ndate: 2017-02-27 22:02:12\ntags:\n---\n\n> ***社交平台不就是用来立flag的吗？ —— 沃兹·基硕德***\n\n### 扯在前面\n\n众所周知, OKR（Object Key Results）是一套指数型组织管理的方式，用来取代原有的KPI，能极大提高团队凝聚力与创造力。前一段时间一直想给今年列个计划，却无从下手，毕竟flag天天立，真正实现的很少，若是细化计划貌似也起不到什么好效果，只会在deadline时发现完不成了，就一拖再拖，啥也干不成。前几天看了本指数型组织相关的书，发现他喵的这套理论用在个人身上也是妥妥的啊，遂萌生了订几个OKR的想法，之后会阶段性地反馈成果（又一个flag）。\n\n### OKR\n\n#### 一、Fuck The Leetcode\n\n1. 完成100题并输出坑题文档\n2. 完成200题并输出坑题文档\n3. 完成300题并输出坑题文档\n4. 完成400题并输出坑题文档\n5. 完成500题并输出坑题文档\n\n（注1：语言不限，上传到github）\n（注2：他喵的按照leetcode出题速度年底600都有了）\n\n#### 二、掌握前端高级技能\n\n1. 读完bootstrap所有源码\n2. 搭建博客框架，不使用vue为佳（使用vue完成度80%）\n3. 编写任意前端小游戏，要求流畅无bug\n\n#### 三、编程基础技能树\n\n1. 做完《算法导论》课后题\n2. 在linux上部署整个架构系统\n3. 使用屁眼通红（划掉）python编写一个爬虫，爬取知乎个人关注的收藏夹下所有收藏的回答并存储数据库（mongo）\n4. 使用go编写正则表达式引擎\n\n#### 四、个人生活\n\n1. 体重140\n2. 戒烟\n3. 一年断片不超过三次\n4. 跑马拉松\n\n### 记录\n\n之后完成一个KR会在这里记录日期","slug":"2017年OKR","published":1,"updated":"2017-04-24T08:03:26.242Z","_id":"cj1up2aw40001u4ur9j6t9nmn","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong><em>社交平台不就是用来立flag的吗？ —— 沃兹·基硕德</em></strong></p>\n</blockquote>\n<h3 id=\"扯在前面\"><a href=\"#扯在前面\" class=\"headerlink\" title=\"扯在前面\"></a>扯在前面</h3><p>众所周知, OKR（Object Key Results）是一套指数型组织管理的方式，用来取代原有的KPI，能极大提高团队凝聚力与创造力。前一段时间一直想给今年列个计划，却无从下手，毕竟flag天天立，真正实现的很少，若是细化计划貌似也起不到什么好效果，只会在deadline时发现完不成了，就一拖再拖，啥也干不成。前几天看了本指数型组织相关的书，发现他喵的这套理论用在个人身上也是妥妥的啊，遂萌生了订几个OKR的想法，之后会阶段性地反馈成果（又一个flag）。</p>\n<h3 id=\"OKR\"><a href=\"#OKR\" class=\"headerlink\" title=\"OKR\"></a>OKR</h3><h4 id=\"一、Fuck-The-Leetcode\"><a href=\"#一、Fuck-The-Leetcode\" class=\"headerlink\" title=\"一、Fuck The Leetcode\"></a>一、Fuck The Leetcode</h4><ol>\n<li>完成100题并输出坑题文档</li>\n<li>完成200题并输出坑题文档</li>\n<li>完成300题并输出坑题文档</li>\n<li>完成400题并输出坑题文档</li>\n<li>完成500题并输出坑题文档</li>\n</ol>\n<p>（注1：语言不限，上传到github）<br>（注2：他喵的按照leetcode出题速度年底600都有了）</p>\n<h4 id=\"二、掌握前端高级技能\"><a href=\"#二、掌握前端高级技能\" class=\"headerlink\" title=\"二、掌握前端高级技能\"></a>二、掌握前端高级技能</h4><ol>\n<li>读完bootstrap所有源码</li>\n<li>搭建博客框架，不使用vue为佳（使用vue完成度80%）</li>\n<li>编写任意前端小游戏，要求流畅无bug</li>\n</ol>\n<h4 id=\"三、编程基础技能树\"><a href=\"#三、编程基础技能树\" class=\"headerlink\" title=\"三、编程基础技能树\"></a>三、编程基础技能树</h4><ol>\n<li>做完《算法导论》课后题</li>\n<li>在linux上部署整个架构系统</li>\n<li>使用屁眼通红（划掉）python编写一个爬虫，爬取知乎个人关注的收藏夹下所有收藏的回答并存储数据库（mongo）</li>\n<li>使用go编写正则表达式引擎</li>\n</ol>\n<h4 id=\"四、个人生活\"><a href=\"#四、个人生活\" class=\"headerlink\" title=\"四、个人生活\"></a>四、个人生活</h4><ol>\n<li>体重140</li>\n<li>戒烟</li>\n<li>一年断片不超过三次</li>\n<li>跑马拉松</li>\n</ol>\n<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>之后完成一个KR会在这里记录日期</p>\n","excerpt":"","more":"<blockquote>\n<p><strong><em>社交平台不就是用来立flag的吗？ —— 沃兹·基硕德</em></strong></p>\n</blockquote>\n<h3 id=\"扯在前面\"><a href=\"#扯在前面\" class=\"headerlink\" title=\"扯在前面\"></a>扯在前面</h3><p>众所周知, OKR（Object Key Results）是一套指数型组织管理的方式，用来取代原有的KPI，能极大提高团队凝聚力与创造力。前一段时间一直想给今年列个计划，却无从下手，毕竟flag天天立，真正实现的很少，若是细化计划貌似也起不到什么好效果，只会在deadline时发现完不成了，就一拖再拖，啥也干不成。前几天看了本指数型组织相关的书，发现他喵的这套理论用在个人身上也是妥妥的啊，遂萌生了订几个OKR的想法，之后会阶段性地反馈成果（又一个flag）。</p>\n<h3 id=\"OKR\"><a href=\"#OKR\" class=\"headerlink\" title=\"OKR\"></a>OKR</h3><h4 id=\"一、Fuck-The-Leetcode\"><a href=\"#一、Fuck-The-Leetcode\" class=\"headerlink\" title=\"一、Fuck The Leetcode\"></a>一、Fuck The Leetcode</h4><ol>\n<li>完成100题并输出坑题文档</li>\n<li>完成200题并输出坑题文档</li>\n<li>完成300题并输出坑题文档</li>\n<li>完成400题并输出坑题文档</li>\n<li>完成500题并输出坑题文档</li>\n</ol>\n<p>（注1：语言不限，上传到github）<br>（注2：他喵的按照leetcode出题速度年底600都有了）</p>\n<h4 id=\"二、掌握前端高级技能\"><a href=\"#二、掌握前端高级技能\" class=\"headerlink\" title=\"二、掌握前端高级技能\"></a>二、掌握前端高级技能</h4><ol>\n<li>读完bootstrap所有源码</li>\n<li>搭建博客框架，不使用vue为佳（使用vue完成度80%）</li>\n<li>编写任意前端小游戏，要求流畅无bug</li>\n</ol>\n<h4 id=\"三、编程基础技能树\"><a href=\"#三、编程基础技能树\" class=\"headerlink\" title=\"三、编程基础技能树\"></a>三、编程基础技能树</h4><ol>\n<li>做完《算法导论》课后题</li>\n<li>在linux上部署整个架构系统</li>\n<li>使用屁眼通红（划掉）python编写一个爬虫，爬取知乎个人关注的收藏夹下所有收藏的回答并存储数据库（mongo）</li>\n<li>使用go编写正则表达式引擎</li>\n</ol>\n<h4 id=\"四、个人生活\"><a href=\"#四、个人生活\" class=\"headerlink\" title=\"四、个人生活\"></a>四、个人生活</h4><ol>\n<li>体重140</li>\n<li>戒烟</li>\n<li>一年断片不超过三次</li>\n<li>跑马拉松</li>\n</ol>\n<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>之后完成一个KR会在这里记录日期</p>\n"},{"title":"91公分之外","date":"2016-12-31T03:02:43.000Z","_content":"\n![enter description here][1]\n\n### 一\n\n“我并非总是这样...我是说，当我正常的时候。那件事发生之前，我会安稳的躺在沙发上，而非悬浮在半空中偏离沙发91公分处，刚好91公分。”\n\n“请继续。”心理医生说，语气上听不出惊奇。\n\n“都是因为那玩意...”\n\n### 二\n\n我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。\n\n我还记得那天晚上，下班回家，我拖着地，电视里放着不知名的节目。当我把吸尘器收起来的时候，屏幕里的画面裂开来成了白色的雪花。我上前查看，也不是查看，就是随便扭一扭按钮，好像也不起作用。\n\n没用的东西，我心想。愤怒地关掉了电视。\n\n这时右侧的窗户突然灌进来一阵风，窗帘不情愿地飘动着。我走上前，头伸出窗户往外瞧。\n\n没风啊，我四处探头，外面是毫无生气的城市。\n\n我突然觉得头顶上有道光，便抬头一看。\n\n陨石？\n\n我擦了擦眼睛。\n\n是陨石，而且它已经撞掉了隔壁栋楼的天线，在它撞上我之前，我只来得及捂上眼睛。\n\n### 三\n\n“所以你没有受伤是吗？”心理医生的语气依然冷静。\n\n“没受伤？什么意思？它撞倒了隔壁楼的天线啊。”\n\n### 四\n\n当我醒来时，天已经亮了，而我还站在窗户边，头伸出窗外。\n\n不，准确地说，我没有站在窗户边，而是站在窗户的左侧，而我的头，正穿过墙壁。我往右一扭头，便可以看到我家的窗户。\n\n我把头伸回来，向右走到窗户边，起码是我认为的窗户边，手往窗外伸，却摸到了冰冷的墙壁。\n\n这他妈是怎么回事。我往右走两步，碰到了我的桌子，花瓶掉在地上，摔得粉碎。\n\n而我明明离桌子还有一段距离。\n\n我手一伸，扶着桌子往前走，却撞到了我家的门，摔在了地上。\n\n我接着做着实验。我拿起了椅子，坐了下来。可我低头一看，我却坐在空气上，椅子在我一米外，上面空无一人。\n\n这个时候电话响了，我跑过去接，手却直接从电话上穿了过去。\n\n### 五\n\n经过我的测量，我算出来我离真正的自己一共向东偏离了91公分。\n\n我在家不断地做着标记，用粉笔在墙上画着电话、电视、桌子、门和窗户，在地上画着沙发、椅子和床。\n\n我测试了一下，对着画里的电话，拿起话筒，放下话筒。走到画里的门前，对着画里的把手，开门，关门。\n\n接下来只要习惯这种偏离就可以了。我心想。\n\n然而事情并没有想象中的那么简单，在家我还能修正得过来，没问题，不算太坏。\n\n可是出了家门，我便有些不知所措了，尤其是工作的时候。\n\n我是一个打字员，可隔着91公分外的打字机，我看不到键盘，也看不到打出来的字。当我看着纸，手便不知道往哪敲。\n\n这已经是今天丢掉的第五十六张纸了，我心里焦急不安，愤怒地砸在了我以为是空气的桌子上。\n\n整个办公室的目光都集中过来。\n\n### 六\n\n桌上的定时器响了。\n\n“好吧，下次，我们再来谈论小行星的事。”心理医生的语气依然平静。\n\n“陨石，不是小行星，两者很好分别吧，小行星是...反正是两回事就对了。撞击我的是一块陨石，不是别的，我只想生活能回到以前那样。”我从空气中坐起来，脚放在地上。\n\n“很显然，你帮不了我。”\n\n### 七\n\n我买了一架望远镜，放在窗前。我时常透过望远镜看着天空。\n\n我在等着另一颗陨石。\n\n我的墙上贴着跟陨石有关的图片，我的桌上都是跟陨石有关的资料，我对着画着的马桶尿尿时，脑袋里想的也全是陨石。\n\n我打电话给妈妈。\n\n“喂，妈妈，不，我也听不太清楚。听着...我希望您最近不要来看我了...我手头上事很多...不，我不是说我不想见您，只是...”\n\n这时我发现屏幕上的画面又变成了雪花。\n\n我立刻挂掉了电话，走到望远镜前，顺着镜头看去。\n\n陨石。\n\n我按捺住心中的狂喜，继续看着。它并没有朝着我的方向来。\n\n你想去哪？\n\n我带上我的望远镜出了门，把它放在车上，我坐在空气上启动了车。\n\n你跑不掉。\n\n我望着天空，顺着夜空中微弱的光，一路紧追。\n\n我到了一片荒地，插上望远镜，看着陨石，算好了它会落下的位置，我站在那，推倒了望远镜。\n\n来吧，拯救我。我看着越来越近的陨石想道。\n\n### 八\n\n我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。\n\n但是我并不普通，因为我的空间位置与其他人的空间位置有偏差。\n\n这个偏差是向西91公分，向下75公分。\n\n当我坐电梯时，我看到的我身在电梯井里，当我在家时，所有东西都比我高75公分，这让我很难拖地。\n\n不过有一个好处，就是我睡觉的时候不用关灯，我一躺下，这个世界就是黑的，比灯关了还要黑。\n\n“所以你没有受伤是吗？”\n\n“你说多少公分来着？”\n\n“好吧，下次，我们再来谈论小行星的事。”定时器又在响，一只手按掉了它。\n\n我坐在椅子上，看着窗外，天空比平常高了75公分，我微曲着，只有头露在地面上。\n\n电话响了，是妈妈打过来的，因为没人接，转成了答录机。\n\n“你最近是怎么了，我很担心。你约翰叔叔说在路上碰到你你都没跟他打招呼，他给你介绍的工作，你知道吗，奥黑，奥黑...”\n\n### 九\n\n他们说这种症状发生的概率是1%，随机地发生在某个人身上，他们就告诉我这些。\n\n他们不告诉你你有多疯，只告诉你，你迷失了自我，情绪失控，头脑出了问题。\n\n1%还是0.1%，91公分还是多少公分，就算我知道了我偏移了自己多少公分，又有什么意义呢。\n\n我感受到世界在颤抖，我很慌张，低下了头，周围一片漆黑，但是很奇怪的，我可以感受到，是的，陨石，有无数块陨石飞了过来。\n\n我捂上了眼睛。\n\n\n### 注\n\n本文来自动画短片《Skhizein》。\n\n完\n\n\n[1]: /images/91_1.jpg","source":"_posts/91公分之外.md","raw":"---\ntitle: 91公分之外\ndate: 2016-12-31 11:02:43\ntags:\n---\n\n![enter description here][1]\n\n### 一\n\n“我并非总是这样...我是说，当我正常的时候。那件事发生之前，我会安稳的躺在沙发上，而非悬浮在半空中偏离沙发91公分处，刚好91公分。”\n\n“请继续。”心理医生说，语气上听不出惊奇。\n\n“都是因为那玩意...”\n\n### 二\n\n我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。\n\n我还记得那天晚上，下班回家，我拖着地，电视里放着不知名的节目。当我把吸尘器收起来的时候，屏幕里的画面裂开来成了白色的雪花。我上前查看，也不是查看，就是随便扭一扭按钮，好像也不起作用。\n\n没用的东西，我心想。愤怒地关掉了电视。\n\n这时右侧的窗户突然灌进来一阵风，窗帘不情愿地飘动着。我走上前，头伸出窗户往外瞧。\n\n没风啊，我四处探头，外面是毫无生气的城市。\n\n我突然觉得头顶上有道光，便抬头一看。\n\n陨石？\n\n我擦了擦眼睛。\n\n是陨石，而且它已经撞掉了隔壁栋楼的天线，在它撞上我之前，我只来得及捂上眼睛。\n\n### 三\n\n“所以你没有受伤是吗？”心理医生的语气依然冷静。\n\n“没受伤？什么意思？它撞倒了隔壁楼的天线啊。”\n\n### 四\n\n当我醒来时，天已经亮了，而我还站在窗户边，头伸出窗外。\n\n不，准确地说，我没有站在窗户边，而是站在窗户的左侧，而我的头，正穿过墙壁。我往右一扭头，便可以看到我家的窗户。\n\n我把头伸回来，向右走到窗户边，起码是我认为的窗户边，手往窗外伸，却摸到了冰冷的墙壁。\n\n这他妈是怎么回事。我往右走两步，碰到了我的桌子，花瓶掉在地上，摔得粉碎。\n\n而我明明离桌子还有一段距离。\n\n我手一伸，扶着桌子往前走，却撞到了我家的门，摔在了地上。\n\n我接着做着实验。我拿起了椅子，坐了下来。可我低头一看，我却坐在空气上，椅子在我一米外，上面空无一人。\n\n这个时候电话响了，我跑过去接，手却直接从电话上穿了过去。\n\n### 五\n\n经过我的测量，我算出来我离真正的自己一共向东偏离了91公分。\n\n我在家不断地做着标记，用粉笔在墙上画着电话、电视、桌子、门和窗户，在地上画着沙发、椅子和床。\n\n我测试了一下，对着画里的电话，拿起话筒，放下话筒。走到画里的门前，对着画里的把手，开门，关门。\n\n接下来只要习惯这种偏离就可以了。我心想。\n\n然而事情并没有想象中的那么简单，在家我还能修正得过来，没问题，不算太坏。\n\n可是出了家门，我便有些不知所措了，尤其是工作的时候。\n\n我是一个打字员，可隔着91公分外的打字机，我看不到键盘，也看不到打出来的字。当我看着纸，手便不知道往哪敲。\n\n这已经是今天丢掉的第五十六张纸了，我心里焦急不安，愤怒地砸在了我以为是空气的桌子上。\n\n整个办公室的目光都集中过来。\n\n### 六\n\n桌上的定时器响了。\n\n“好吧，下次，我们再来谈论小行星的事。”心理医生的语气依然平静。\n\n“陨石，不是小行星，两者很好分别吧，小行星是...反正是两回事就对了。撞击我的是一块陨石，不是别的，我只想生活能回到以前那样。”我从空气中坐起来，脚放在地上。\n\n“很显然，你帮不了我。”\n\n### 七\n\n我买了一架望远镜，放在窗前。我时常透过望远镜看着天空。\n\n我在等着另一颗陨石。\n\n我的墙上贴着跟陨石有关的图片，我的桌上都是跟陨石有关的资料，我对着画着的马桶尿尿时，脑袋里想的也全是陨石。\n\n我打电话给妈妈。\n\n“喂，妈妈，不，我也听不太清楚。听着...我希望您最近不要来看我了...我手头上事很多...不，我不是说我不想见您，只是...”\n\n这时我发现屏幕上的画面又变成了雪花。\n\n我立刻挂掉了电话，走到望远镜前，顺着镜头看去。\n\n陨石。\n\n我按捺住心中的狂喜，继续看着。它并没有朝着我的方向来。\n\n你想去哪？\n\n我带上我的望远镜出了门，把它放在车上，我坐在空气上启动了车。\n\n你跑不掉。\n\n我望着天空，顺着夜空中微弱的光，一路紧追。\n\n我到了一片荒地，插上望远镜，看着陨石，算好了它会落下的位置，我站在那，推倒了望远镜。\n\n来吧，拯救我。我看着越来越近的陨石想道。\n\n### 八\n\n我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。\n\n但是我并不普通，因为我的空间位置与其他人的空间位置有偏差。\n\n这个偏差是向西91公分，向下75公分。\n\n当我坐电梯时，我看到的我身在电梯井里，当我在家时，所有东西都比我高75公分，这让我很难拖地。\n\n不过有一个好处，就是我睡觉的时候不用关灯，我一躺下，这个世界就是黑的，比灯关了还要黑。\n\n“所以你没有受伤是吗？”\n\n“你说多少公分来着？”\n\n“好吧，下次，我们再来谈论小行星的事。”定时器又在响，一只手按掉了它。\n\n我坐在椅子上，看着窗外，天空比平常高了75公分，我微曲着，只有头露在地面上。\n\n电话响了，是妈妈打过来的，因为没人接，转成了答录机。\n\n“你最近是怎么了，我很担心。你约翰叔叔说在路上碰到你你都没跟他打招呼，他给你介绍的工作，你知道吗，奥黑，奥黑...”\n\n### 九\n\n他们说这种症状发生的概率是1%，随机地发生在某个人身上，他们就告诉我这些。\n\n他们不告诉你你有多疯，只告诉你，你迷失了自我，情绪失控，头脑出了问题。\n\n1%还是0.1%，91公分还是多少公分，就算我知道了我偏移了自己多少公分，又有什么意义呢。\n\n我感受到世界在颤抖，我很慌张，低下了头，周围一片漆黑，但是很奇怪的，我可以感受到，是的，陨石，有无数块陨石飞了过来。\n\n我捂上了眼睛。\n\n\n### 注\n\n本文来自动画短片《Skhizein》。\n\n完\n\n\n[1]: /images/91_1.jpg","slug":"91公分之外","published":1,"updated":"2017-04-24T08:03:26.246Z","_id":"cj1up2aw60002u4ure8z52s92","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/91_1.jpg\" alt=\"enter description here\"></p>\n<h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>“我并非总是这样…我是说，当我正常的时候。那件事发生之前，我会安稳的躺在沙发上，而非悬浮在半空中偏离沙发91公分处，刚好91公分。”</p>\n<p>“请继续。”心理医生说，语气上听不出惊奇。</p>\n<p>“都是因为那玩意…”</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。</p>\n<p>我还记得那天晚上，下班回家，我拖着地，电视里放着不知名的节目。当我把吸尘器收起来的时候，屏幕里的画面裂开来成了白色的雪花。我上前查看，也不是查看，就是随便扭一扭按钮，好像也不起作用。</p>\n<p>没用的东西，我心想。愤怒地关掉了电视。</p>\n<p>这时右侧的窗户突然灌进来一阵风，窗帘不情愿地飘动着。我走上前，头伸出窗户往外瞧。</p>\n<p>没风啊，我四处探头，外面是毫无生气的城市。</p>\n<p>我突然觉得头顶上有道光，便抬头一看。</p>\n<p>陨石？</p>\n<p>我擦了擦眼睛。</p>\n<p>是陨石，而且它已经撞掉了隔壁栋楼的天线，在它撞上我之前，我只来得及捂上眼睛。</p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>“所以你没有受伤是吗？”心理医生的语气依然冷静。</p>\n<p>“没受伤？什么意思？它撞倒了隔壁楼的天线啊。”</p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>当我醒来时，天已经亮了，而我还站在窗户边，头伸出窗外。</p>\n<p>不，准确地说，我没有站在窗户边，而是站在窗户的左侧，而我的头，正穿过墙壁。我往右一扭头，便可以看到我家的窗户。</p>\n<p>我把头伸回来，向右走到窗户边，起码是我认为的窗户边，手往窗外伸，却摸到了冰冷的墙壁。</p>\n<p>这他妈是怎么回事。我往右走两步，碰到了我的桌子，花瓶掉在地上，摔得粉碎。</p>\n<p>而我明明离桌子还有一段距离。</p>\n<p>我手一伸，扶着桌子往前走，却撞到了我家的门，摔在了地上。</p>\n<p>我接着做着实验。我拿起了椅子，坐了下来。可我低头一看，我却坐在空气上，椅子在我一米外，上面空无一人。</p>\n<p>这个时候电话响了，我跑过去接，手却直接从电话上穿了过去。</p>\n<h3 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h3><p>经过我的测量，我算出来我离真正的自己一共向东偏离了91公分。</p>\n<p>我在家不断地做着标记，用粉笔在墙上画着电话、电视、桌子、门和窗户，在地上画着沙发、椅子和床。</p>\n<p>我测试了一下，对着画里的电话，拿起话筒，放下话筒。走到画里的门前，对着画里的把手，开门，关门。</p>\n<p>接下来只要习惯这种偏离就可以了。我心想。</p>\n<p>然而事情并没有想象中的那么简单，在家我还能修正得过来，没问题，不算太坏。</p>\n<p>可是出了家门，我便有些不知所措了，尤其是工作的时候。</p>\n<p>我是一个打字员，可隔着91公分外的打字机，我看不到键盘，也看不到打出来的字。当我看着纸，手便不知道往哪敲。</p>\n<p>这已经是今天丢掉的第五十六张纸了，我心里焦急不安，愤怒地砸在了我以为是空气的桌子上。</p>\n<p>整个办公室的目光都集中过来。</p>\n<h3 id=\"六\"><a href=\"#六\" class=\"headerlink\" title=\"六\"></a>六</h3><p>桌上的定时器响了。</p>\n<p>“好吧，下次，我们再来谈论小行星的事。”心理医生的语气依然平静。</p>\n<p>“陨石，不是小行星，两者很好分别吧，小行星是…反正是两回事就对了。撞击我的是一块陨石，不是别的，我只想生活能回到以前那样。”我从空气中坐起来，脚放在地上。</p>\n<p>“很显然，你帮不了我。”</p>\n<h3 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h3><p>我买了一架望远镜，放在窗前。我时常透过望远镜看着天空。</p>\n<p>我在等着另一颗陨石。</p>\n<p>我的墙上贴着跟陨石有关的图片，我的桌上都是跟陨石有关的资料，我对着画着的马桶尿尿时，脑袋里想的也全是陨石。</p>\n<p>我打电话给妈妈。</p>\n<p>“喂，妈妈，不，我也听不太清楚。听着…我希望您最近不要来看我了…我手头上事很多…不，我不是说我不想见您，只是…”</p>\n<p>这时我发现屏幕上的画面又变成了雪花。</p>\n<p>我立刻挂掉了电话，走到望远镜前，顺着镜头看去。</p>\n<p>陨石。</p>\n<p>我按捺住心中的狂喜，继续看着。它并没有朝着我的方向来。</p>\n<p>你想去哪？</p>\n<p>我带上我的望远镜出了门，把它放在车上，我坐在空气上启动了车。</p>\n<p>你跑不掉。</p>\n<p>我望着天空，顺着夜空中微弱的光，一路紧追。</p>\n<p>我到了一片荒地，插上望远镜，看着陨石，算好了它会落下的位置，我站在那，推倒了望远镜。</p>\n<p>来吧，拯救我。我看着越来越近的陨石想道。</p>\n<h3 id=\"八\"><a href=\"#八\" class=\"headerlink\" title=\"八\"></a>八</h3><p>我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。</p>\n<p>但是我并不普通，因为我的空间位置与其他人的空间位置有偏差。</p>\n<p>这个偏差是向西91公分，向下75公分。</p>\n<p>当我坐电梯时，我看到的我身在电梯井里，当我在家时，所有东西都比我高75公分，这让我很难拖地。</p>\n<p>不过有一个好处，就是我睡觉的时候不用关灯，我一躺下，这个世界就是黑的，比灯关了还要黑。</p>\n<p>“所以你没有受伤是吗？”</p>\n<p>“你说多少公分来着？”</p>\n<p>“好吧，下次，我们再来谈论小行星的事。”定时器又在响，一只手按掉了它。</p>\n<p>我坐在椅子上，看着窗外，天空比平常高了75公分，我微曲着，只有头露在地面上。</p>\n<p>电话响了，是妈妈打过来的，因为没人接，转成了答录机。</p>\n<p>“你最近是怎么了，我很担心。你约翰叔叔说在路上碰到你你都没跟他打招呼，他给你介绍的工作，你知道吗，奥黑，奥黑…”</p>\n<h3 id=\"九\"><a href=\"#九\" class=\"headerlink\" title=\"九\"></a>九</h3><p>他们说这种症状发生的概率是1%，随机地发生在某个人身上，他们就告诉我这些。</p>\n<p>他们不告诉你你有多疯，只告诉你，你迷失了自我，情绪失控，头脑出了问题。</p>\n<p>1%还是0.1%，91公分还是多少公分，就算我知道了我偏移了自己多少公分，又有什么意义呢。</p>\n<p>我感受到世界在颤抖，我很慌张，低下了头，周围一片漆黑，但是很奇怪的，我可以感受到，是的，陨石，有无数块陨石飞了过来。</p>\n<p>我捂上了眼睛。</p>\n<h3 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h3><p>本文来自动画短片《Skhizein》。</p>\n<p>完</p>\n","excerpt":"","more":"<p><img src=\"/images/91_1.jpg\" alt=\"enter description here\"></p>\n<h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>“我并非总是这样…我是说，当我正常的时候。那件事发生之前，我会安稳的躺在沙发上，而非悬浮在半空中偏离沙发91公分处，刚好91公分。”</p>\n<p>“请继续。”心理医生说，语气上听不出惊奇。</p>\n<p>“都是因为那玩意…”</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。</p>\n<p>我还记得那天晚上，下班回家，我拖着地，电视里放着不知名的节目。当我把吸尘器收起来的时候，屏幕里的画面裂开来成了白色的雪花。我上前查看，也不是查看，就是随便扭一扭按钮，好像也不起作用。</p>\n<p>没用的东西，我心想。愤怒地关掉了电视。</p>\n<p>这时右侧的窗户突然灌进来一阵风，窗帘不情愿地飘动着。我走上前，头伸出窗户往外瞧。</p>\n<p>没风啊，我四处探头，外面是毫无生气的城市。</p>\n<p>我突然觉得头顶上有道光，便抬头一看。</p>\n<p>陨石？</p>\n<p>我擦了擦眼睛。</p>\n<p>是陨石，而且它已经撞掉了隔壁栋楼的天线，在它撞上我之前，我只来得及捂上眼睛。</p>\n<h3 id=\"三\"><a href=\"#三\" class=\"headerlink\" title=\"三\"></a>三</h3><p>“所以你没有受伤是吗？”心理医生的语气依然冷静。</p>\n<p>“没受伤？什么意思？它撞倒了隔壁楼的天线啊。”</p>\n<h3 id=\"四\"><a href=\"#四\" class=\"headerlink\" title=\"四\"></a>四</h3><p>当我醒来时，天已经亮了，而我还站在窗户边，头伸出窗外。</p>\n<p>不，准确地说，我没有站在窗户边，而是站在窗户的左侧，而我的头，正穿过墙壁。我往右一扭头，便可以看到我家的窗户。</p>\n<p>我把头伸回来，向右走到窗户边，起码是我认为的窗户边，手往窗外伸，却摸到了冰冷的墙壁。</p>\n<p>这他妈是怎么回事。我往右走两步，碰到了我的桌子，花瓶掉在地上，摔得粉碎。</p>\n<p>而我明明离桌子还有一段距离。</p>\n<p>我手一伸，扶着桌子往前走，却撞到了我家的门，摔在了地上。</p>\n<p>我接着做着实验。我拿起了椅子，坐了下来。可我低头一看，我却坐在空气上，椅子在我一米外，上面空无一人。</p>\n<p>这个时候电话响了，我跑过去接，手却直接从电话上穿了过去。</p>\n<h3 id=\"五\"><a href=\"#五\" class=\"headerlink\" title=\"五\"></a>五</h3><p>经过我的测量，我算出来我离真正的自己一共向东偏离了91公分。</p>\n<p>我在家不断地做着标记，用粉笔在墙上画着电话、电视、桌子、门和窗户，在地上画着沙发、椅子和床。</p>\n<p>我测试了一下，对着画里的电话，拿起话筒，放下话筒。走到画里的门前，对着画里的把手，开门，关门。</p>\n<p>接下来只要习惯这种偏离就可以了。我心想。</p>\n<p>然而事情并没有想象中的那么简单，在家我还能修正得过来，没问题，不算太坏。</p>\n<p>可是出了家门，我便有些不知所措了，尤其是工作的时候。</p>\n<p>我是一个打字员，可隔着91公分外的打字机，我看不到键盘，也看不到打出来的字。当我看着纸，手便不知道往哪敲。</p>\n<p>这已经是今天丢掉的第五十六张纸了，我心里焦急不安，愤怒地砸在了我以为是空气的桌子上。</p>\n<p>整个办公室的目光都集中过来。</p>\n<h3 id=\"六\"><a href=\"#六\" class=\"headerlink\" title=\"六\"></a>六</h3><p>桌上的定时器响了。</p>\n<p>“好吧，下次，我们再来谈论小行星的事。”心理医生的语气依然平静。</p>\n<p>“陨石，不是小行星，两者很好分别吧，小行星是…反正是两回事就对了。撞击我的是一块陨石，不是别的，我只想生活能回到以前那样。”我从空气中坐起来，脚放在地上。</p>\n<p>“很显然，你帮不了我。”</p>\n<h3 id=\"七\"><a href=\"#七\" class=\"headerlink\" title=\"七\"></a>七</h3><p>我买了一架望远镜，放在窗前。我时常透过望远镜看着天空。</p>\n<p>我在等着另一颗陨石。</p>\n<p>我的墙上贴着跟陨石有关的图片，我的桌上都是跟陨石有关的资料，我对着画着的马桶尿尿时，脑袋里想的也全是陨石。</p>\n<p>我打电话给妈妈。</p>\n<p>“喂，妈妈，不，我也听不太清楚。听着…我希望您最近不要来看我了…我手头上事很多…不，我不是说我不想见您，只是…”</p>\n<p>这时我发现屏幕上的画面又变成了雪花。</p>\n<p>我立刻挂掉了电话，走到望远镜前，顺着镜头看去。</p>\n<p>陨石。</p>\n<p>我按捺住心中的狂喜，继续看着。它并没有朝着我的方向来。</p>\n<p>你想去哪？</p>\n<p>我带上我的望远镜出了门，把它放在车上，我坐在空气上启动了车。</p>\n<p>你跑不掉。</p>\n<p>我望着天空，顺着夜空中微弱的光，一路紧追。</p>\n<p>我到了一片荒地，插上望远镜，看着陨石，算好了它会落下的位置，我站在那，推倒了望远镜。</p>\n<p>来吧，拯救我。我看着越来越近的陨石想道。</p>\n<h3 id=\"八\"><a href=\"#八\" class=\"headerlink\" title=\"八\"></a>八</h3><p>我是一个普通的打字员，普通到放在人群里毫无辨识度的那种。</p>\n<p>但是我并不普通，因为我的空间位置与其他人的空间位置有偏差。</p>\n<p>这个偏差是向西91公分，向下75公分。</p>\n<p>当我坐电梯时，我看到的我身在电梯井里，当我在家时，所有东西都比我高75公分，这让我很难拖地。</p>\n<p>不过有一个好处，就是我睡觉的时候不用关灯，我一躺下，这个世界就是黑的，比灯关了还要黑。</p>\n<p>“所以你没有受伤是吗？”</p>\n<p>“你说多少公分来着？”</p>\n<p>“好吧，下次，我们再来谈论小行星的事。”定时器又在响，一只手按掉了它。</p>\n<p>我坐在椅子上，看着窗外，天空比平常高了75公分，我微曲着，只有头露在地面上。</p>\n<p>电话响了，是妈妈打过来的，因为没人接，转成了答录机。</p>\n<p>“你最近是怎么了，我很担心。你约翰叔叔说在路上碰到你你都没跟他打招呼，他给你介绍的工作，你知道吗，奥黑，奥黑…”</p>\n<h3 id=\"九\"><a href=\"#九\" class=\"headerlink\" title=\"九\"></a>九</h3><p>他们说这种症状发生的概率是1%，随机地发生在某个人身上，他们就告诉我这些。</p>\n<p>他们不告诉你你有多疯，只告诉你，你迷失了自我，情绪失控，头脑出了问题。</p>\n<p>1%还是0.1%，91公分还是多少公分，就算我知道了我偏移了自己多少公分，又有什么意义呢。</p>\n<p>我感受到世界在颤抖，我很慌张，低下了头，周围一片漆黑，但是很奇怪的，我可以感受到，是的，陨石，有无数块陨石飞了过来。</p>\n<p>我捂上了眼睛。</p>\n<h3 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h3><p>本文来自动画短片《Skhizein》。</p>\n<p>完</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-16T07:03:03.980Z","updated":"2016-12-16T03:16:24.224Z","_id":"cj1up2awd0003u4urdhveg3od","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"幸福简易教学指南（一）","date":"2016-12-19T02:46:28.000Z","_content":"\n## 导言\n\n我们都听过那句话，“明白很多道理，却还是过不好这一生”。我看到这句话的第一想法是，对啊，但是为什么？为什么道理都讲得很清楚，而我们也懂，但就是改变不了什么？在上完《哈佛幸福课》课程（又名《积极心理学》）后，我渐渐明确了这个问题的解答。之所以道理会无用，并不一定说明它是错的，而是它可能只是**孤零零的道理**。以前有个学长说，念头未转化为行为时，就只是一个念头而已。就好比拿到了个轮子就想骑着上路，当然会摔倒。本文希望提出一套从**理论**、**实例**和**方法论**上都兼顾的**完整体系**，从根本上提供提高我们的幸福水平的可行条件，帮助我们实现自我、找到真爱以及变得更幸福。（PS：配合《哈佛幸福课》食用风味更佳）\n\n## 个人经历\n\n很长一段时间以来，笔者都深陷在一种难以言明的低落情绪中，即使在没有烦恼的日子里，情绪都极为低落，那种感觉就像陷入了泥潭中，怎么爬也爬不上来。与这种情绪抗争的过程中，我渐渐失去了热情，大概就是觉得无能为力，觉得怎么努力都是不开心。在这个过程中伤害了许多人，如果接着上面的比喻的话，便是拼命抓着其他人的身体想从泥潭里爬出来，却把他们也拉了进来。结果便是在这一年，我与一些以为会是一生伙伴的好朋友渐行渐远，我也彻底失去了一个可能是我的the one的人。在这段至今为止最糟糕的日子里，看《幸福课》，做笔记，践行它的方法，是我最大的能量来源。我可以清晰地感受到我自身的改变，面对我的情绪我不再觉得无能为力，我变得更为乐观，可以平静面对困境，可以说它已经改变了我的人生。我并没有说在上完课之后我就神功大成天下无敌了，到现在我只是入了个门，开始上路了而已。Tol（幸福课老师）说，让自己更幸福这是毕生的修炼。希望这篇文章可以让你也开始走上更幸福的道路。\n\n## 目录\n\n- **一个简单的人生框架**\n- **为什么要幸福**\n- **基本概念与误区**\n- 环境与乐观主义\n- 关于改变\n- 幸福方法论\n- 寻求自我\n- 爱情\n- 拒绝完美主义\n- 如何成为很厉害的人\n- 自尊\n\n## 一、一个简单的人生框架\n\n你是否遇到过以下体验？\n\n- 有个想法，但是不知道怎么去做\n- 知道怎么去做，但是缺乏执行力\n- 已经在做了，但是时常迷失，失去动力，最后选择放弃\n\n为了解决这些问题，为幸福课打下基础，本章讲述一个大家都知道，但是时常会忘记的框架，即“**目标-理论-方法**”框架（名字我瞎编的），如图\n\n![enter description here][1]\n\n举个例子，比如说我们想要变得强壮，这是一个**目标**，这个时候需要拥有一套能够实现这个目标的严谨**理论**，这套理论围绕实现“变得强壮”这个主题。\n\n了解理论可以通过各种方式（**论文、谷歌、知乎、quora、书籍等等**），我们明白了变强壮的机理、状态变化、优缺点和常用方法等。比如我知道了肌肉增长本质上是肌肉纤维的断裂与生成，知道这个过程需要补充哪些营养，知道肌肉的分布，增肌与减脂的区别，有氧与无氧的区别与各自的作用。\n\n这个时候应当有一些方案产生，我们比较它们的优劣，结合自身的资源（经济、身体条件等），选出了一个最适合我们的方案，这就衍生出了**方法**。\n\n这里的方法不仅仅是“去健身房开练”这么简单的东西，它应当包括计划和阶段性反馈标准等。比如是选择徒手还是健身房，训练的频率如何，不同肌群的训练如何搭配，饮食如何控制，具体到哪个动作如何做，做的时候应该有什么感觉。\n\n到了这一步，事实上我们毫无成绩，是的，因此这个框架有个非常重要的一项准则是——**先动起来**。\n\n接着上面的例子说，假如我们想变强壮，在看过几篇文章后，你就应该已经行动起来了，二话不说健身卡先办了，看的文章里觉得差不多的计划直接去试试。\n\n在动的过程中，你有了疑惑，你去寻找、完善你的理论，通过理论纠正你的方法，改正你的行为。你发现这样的搭配不适合你，你发现这个动作对你来说难度还太大，你发现进步不大原因在于饮食没跟上，你选择更加适合你的饮食习惯。\n\n我想到这里前两个问题的解决方法已经有了眉目了，而第三个问题要在“动起来”之后才会遇到，却是最致命的。解决的方法就在上面那张图上，关键在于**反馈**，即明确自己的目标，提醒自己我是要“变得强壮”，不是来练练给自己心理安慰，8-12RM的意思是力竭不是觉得有点累就可以，不要怕丢脸而去挑战自己还承受不了的重量，我们做的一切都应为“变得强壮”服务。\n\n当然了，有些人做到一半发现这并不是自己想要的，中途更改目标是常有的，但是这不在这个框架的讨论范围内。在这篇文章里这不是什么问题，因为我想极少有人会更改“幸福”这个目标吧。\n\n以上就是这个框架的大致内容，这是一个大家可能都知道的框架，我把它写出来的原因有三：\n\n- 这个框架适用于提升幸福感\n- 我希望给后面的内容提供一个**容器**，一个互相联结的方式，帮助读者更好地理解本文\n- 我坚信这是一个应该贯穿在生活中的方方面面中，成为像我们呼吸一样的存在的习惯，当我们想做某件事，这个流程应当自然而然地浮现出来\n\n我会在后面反复地提到这个框架的应用。这个框架最重要的意义在于一种全面性，无论是只关注干瘪的道理和毫无根据的方法都是不够的，我们需要知道**为什么**，也要知道**怎么做**。\n\n这篇文章提到的大部分理论都是我们所知道的，请不要抱着寻找惊奇的心态来阅读，导言里已经提到了，我们并非不清楚道理，我们只是缺乏逻辑上的**连接**与**整合**。\n\n> common sense is not all that common（常识并不普通）\n\n共勉\n\n## 二、为什么要幸福\n\n首先，我们需要达成一个共识，即我们一生中所做的一切都是为了同一个**终极目的**——幸福。\n\n这种幸福并非指**结局式幸福**，王子与公主在一起了，他拯救了世界，他成为千万富翁。这里的幸福指的是一种稳定的幸福，即**幸福水平**。金钱、地位和权力，这些东西很好，但不是我们的**目标**，它们只是一种达成幸福的**手段**。这里有两张图解释了**结局式幸福**与**幸福水平**的区别。\n\n![enter description here][4]\n![enter description here][5]\n\n**结局式幸福**强调只有成功才能幸福，这也是成功学的主张。而**幸福水平**即《幸福课》认为成功与幸福是并行的，幸福相比于成功需要付出同等甚至更多的努力。\n\n我们听多了富人也常常不幸福的故事，而这两年微博上由于反转幽默却引领着金钱一定会让人快乐的思潮。这两种想法都是错误的，因为事实上经济水平与我们的幸福水平相关度极低，这一点在讲**完美主义**的时候会详细说明。\n \n事实上，一味寻求**结局式幸福**反而可能会降低我们的幸福水平，因为“在最后幸福”的心态常常会转化为“现在的苦是为了将来的幸福”的想法。\n\n**幸福应当是一种长久的状态，我们将来要幸福，并不妨碍现在的幸福。**\n\n那么如何拥有这种状态？\n\n积极心理学家认为，与幸福水平密切相关的是**心理弹性**，这是一种对抗困境的能力。幸福就意味着我们不会伤心难过吗？并不是，而是意味着我们在遭遇困境时能更好更快地恢复。\n\n心理弹性由以下因素组成\n\n- 目标\n- 意义感\n- 乐观主义\n- 榜样\n- 不单干 -> 寻求帮助的能力\n- 承认弱点，承认需要\n- 专注长处\n\n目标。五年十年后我们想成为什么样？我们要做到什么？这给了我们动力。\n\n意义感。帮助他人与帮助社会，将产生自助与他助的上升循环。\n\n榜样。可以是任何人，你告诉自己，你想像他那样，你想变成那样，他会给你力量与方向。\n\n不单干。我们不要告诉自己，我们强大到不需要别人的帮助，我们应该说，我们强大到可以寻求帮助。当然我们需要找到合适的人，能给予我们正确回复的人。\n\n乐观主义。提供了一种自由转换看事情角度的能力，一般来说，我们认为这便是成熟的定义。\n\n承认弱点，承认需要。给自己为人的机会，我们不能对抗自己的人性，我们需要认识它，接受它。\n\n专注长处。这并不意味着忽略短处，而是多问自己，我到底最擅长什么，我能做什么？发掘它，加强它。\n\n**心理弹性**的这些因素在80年代在西方流行起来，并起到了极大的作用，问一下自己，我们具有这些东西吗？后面的章节中会根据这些因素提到如何细化提高我们的心理弹性。\n\n我相信许多人都在潜意识里拒绝幸福，人们推崇“吃得苦中苦，方为人上人”这种理论，事实上更加幸福的我们，将拥有更多精力去实现自我，去爱人与寻求真爱甚至是取得世俗意义上的成功。\n\n我再重申一遍这句话，**我们因幸福而成功，不因成功而幸福**。\n\n## 三、基本概念与误区\n\n### 问题创造现实\n\n做一个小测验，给你20秒，观察下面的图，请数出图中有多少个人\n\n![enter description here][2]\n\n数完了？往下拖动\n\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n\n好的，数完了吗，是不是很简单？\n\n那么不要往上拉，请问左起第三个人穿什么颜色的衣服？\n\n回答上来了？很好，请问右起第五个人有胡子吗？\n\n不必为答不上来而羞愧，不管是只回答上来一题或者没有，都是很正常的，人类每天接收大量的信息，不可能对每一条信息都加以分析、加工、存储，**遗忘**与**忽略**是我们的一种习惯，我这里并非要否定这种习惯，事实上当你看完这篇文章或者学完幸福课也不可能获得能回答这种问题的能力，因为当我问出那个问题的时候，我们专注于数人数，其他信息在我们眼里是不存在的。\n\n我想说的是，如果把这两个问题放在前面呢？如果我一开始就提出这两个问题，答案是不是显而易见，是不是跟数人数一样简单？\n\n这便是**正确提问**的重要性，我们问的问题决定了我们的关注点，决定了我们能得到什么信息。换句话说，**问题创造了现实**。\n\n根据Tol老师提供的数据，在研究文献的检索中，**忧郁**与**幸福**这两个关键字的结果比例为21:1，严谨的学术界与世俗界总是对应的，生活中当我们遭遇困境，我们会问，哪里不对了？what's wrong？但是我们极少问，哪里好？what's good？\n\n这并非说我们不应该关注那些不好的，解决问题仍然很重要。但是同时，我们也应该关注那些好的，因为如果我们不关注，它们便**不存在**，而这十分致命，下面有个简单的图可以说明这点\n\n![enter description here][3]\n\n解决问题，消除抑郁，可以有效帮我们从抑郁的状态中摆脱出来，但是它的作用效果只在中间的临界线为止，无法帮我们达到幸福的状态，要达到那种状态，更需要第二种作用力 —— **建立美好**。\n\n那么什么是所谓的关注好的？接着上面的例子，关键在于**提出正确的问题**。如果我们的问题是如何不再忧郁，那么我们只能解决忧郁，并且很多时候只是暂时性的。如果我们的问题是我哪里错了，那我们就看不到我们好的地方。如果我们只问怎么摆脱这样那样的痛苦，那我们永远无法理解苦难的价值。\n\n**问题创造现实**，我们问出怎样的问题，就创造了怎样的世界。我们将在后面的章节中提出一些我们不常问，或是我们选择不去问的问题，由这些问题来创造我们**幸福的基础**。\n\n### 越长大越不幸福？\n\n我们知道人们在年幼时更易觉得幸福。我曾关注的一名重度抑郁症患者写道：“见过婴儿心花怒放之笑，便觉成长格外凄凉。”\n\n为什么？在长大的过程中我们丢失了什么？\n\n有人问米开朗基罗，你是如何创造出《大卫》这般杰作的？米开朗基罗答道，我没有创造它，我到石料厂，在一块石头上看到了《大卫》，而我做的只是把多余的石头去掉而已。\n\n> 把多余的石头去掉\n\n这是对这个问题非常形象的解答，随着年龄的增长，我们并非丢失了什么，而是增加了一些不该存在于我们思想里的**限制**，那个可以更好的你已经存在于你的身体中，你需要做的，就是去掉这些限制，去掉多余的石头，让那个更好的你重现。\n\n> 为学日益，为道日损 —— 《道德经》\n\n面对这一点，我们需要提出两个问题\n\n- 如何去掉这些限制？\n- 如何让更好的我们苏醒？\n\n两个问题缺一不可，上面已经提到正确提问的重要性。我们不能只提第一个问题，即**解决**，我们还要提第二个问题，即**建立**。\n\n梭罗说，人们在沉默地压抑中。弗洛伊德说，人们在舒适地麻木中。也许你受过伤，你选择了关闭心上的门。你为了躲避痛苦也同时不敢寻求快乐，但这是你想要的吗。你想逃避痛苦吗？你想逃避快乐吗？你愿意一直生活在这种状态中吗？或者是你愿意去追逐快乐，去面对痛苦，去让你的人生更加精彩。\n\n**请停止这种舒适的麻木。**\n\n### 健康模型与疾病模型\n\n与传统的解决心理病痛的方式相比，积极心理学提出的是一种类似于预防医学的方式。这便是传统的疾病模型与积极心理学的健康模型，如图为两种模型\n\n![enter description here][6]\n![enter description here][7]\n\n与传统**治病**的理念不同，积极心理学倡导**增强对抗消极的能力**，类似于生理上我们光是遇到病就去治疗并不能让我们变得健康，只有增加体育锻炼，作息与三餐规律才会让我们真正健康，这种健康体现在我们更少得病与在生病时更快恢复。\n\n> 人不会只因为消除了忧愁而快乐\n\n### 幸福是一种随机现象吗\n\n我们需要知道幸福感与基因也有极大的关系。\n\n上个世纪心理学家们找到了一些同卵双胞胎，他们在出生时被分开，在不同的生活环境下成长。结果长大后他们的个性竟十分相似，幸福水平也十分相似，甚至有的娶了名字相同的妻子。\n\n从这个现象中，心理学家在80年代发布了一篇十分著名的论文 —— **幸福是一种随机现象**。\n\n该论文中最后一句话下了这么一个结论：\n\n> 也许想要变得更幸福跟想要变高一样徒劳，这一切早已在我们出生时就注定。\n\n我想许多人常常有一种命运无可抵抗的感觉，那么这个结论是不是证明了我们的努力是徒劳的？是不是无论我们怎么做，我们早晚会走向同一个结局？我们的人生是不是永远无法改变？\n\n不。\n\n当然不。\n\n在那些对双胞胎的研究中，出现了例外，是的，在这里我们必须承认基因的重要性。但是改变是可能的，否则例外何来？改变是很难的，但是这是有可能的。如果我们承认这是所谓的“**命运**”，而承认它并放弃努力，那么很快这会成为一种**自我预言**，我们会在潜意识里告诉自己这是徒劳的，引诱着我们走向不幸福。我们将在后面提到自我预言的重要性以及如何改变它。\n\n基因带给我们的焦虑和忧郁是一种不公平吗？诚然，这让我们的人生艰辛了不少。但是一旦我们克服了它，我们将比没有这种经历的人拥有更细腻的思维和更柔韧的神经。\n\n我们除了幸福还有什么选择？\n\n### no one is coming\n\n这段话在上课的时候对我触动非常大，虽然它属于自尊的内容，但我把它作为一个非常重要的基础来看。这里直接上课程截图\n\n![enter description here][8]\n\n![enter description here][9]\n\n![enter description here][10]\n\n![enter description here][11]\n\n![enter description here][12]\n\n![enter description here][13]\n\n![enter description here][14]\n\n![enter description here][15]\n\n停止抱怨他人，承担起生活的责任来，承担让自己变好的责任，爱自己，让自己变得幸福，你只要也只能靠自己的努力。\n\n\n  [1]: /images/1.png\n  [2]: /images/2.jpg\n  [3]: /images/3.png\n  [4]: /images/4.png\n  [5]: /images/5.png\n  [6]: /images/6.png\n  [7]: /images/7.png\n  [8]: /images/8.png\n  [9]: /images/9.png\n  [10]: /images/10.png\n  [11]: /images/11.png\n  [12]: /images/12.png\n  [13]: /images/13.png\n  [14]: /images/14.png\n  [15]: /images/15.png","source":"_posts/幸福简易教学指南（一）.md","raw":"---\ntitle: 幸福简易教学指南（一）\ndate: 2016-12-19 10:46:28\ntags:\n---\n\n## 导言\n\n我们都听过那句话，“明白很多道理，却还是过不好这一生”。我看到这句话的第一想法是，对啊，但是为什么？为什么道理都讲得很清楚，而我们也懂，但就是改变不了什么？在上完《哈佛幸福课》课程（又名《积极心理学》）后，我渐渐明确了这个问题的解答。之所以道理会无用，并不一定说明它是错的，而是它可能只是**孤零零的道理**。以前有个学长说，念头未转化为行为时，就只是一个念头而已。就好比拿到了个轮子就想骑着上路，当然会摔倒。本文希望提出一套从**理论**、**实例**和**方法论**上都兼顾的**完整体系**，从根本上提供提高我们的幸福水平的可行条件，帮助我们实现自我、找到真爱以及变得更幸福。（PS：配合《哈佛幸福课》食用风味更佳）\n\n## 个人经历\n\n很长一段时间以来，笔者都深陷在一种难以言明的低落情绪中，即使在没有烦恼的日子里，情绪都极为低落，那种感觉就像陷入了泥潭中，怎么爬也爬不上来。与这种情绪抗争的过程中，我渐渐失去了热情，大概就是觉得无能为力，觉得怎么努力都是不开心。在这个过程中伤害了许多人，如果接着上面的比喻的话，便是拼命抓着其他人的身体想从泥潭里爬出来，却把他们也拉了进来。结果便是在这一年，我与一些以为会是一生伙伴的好朋友渐行渐远，我也彻底失去了一个可能是我的the one的人。在这段至今为止最糟糕的日子里，看《幸福课》，做笔记，践行它的方法，是我最大的能量来源。我可以清晰地感受到我自身的改变，面对我的情绪我不再觉得无能为力，我变得更为乐观，可以平静面对困境，可以说它已经改变了我的人生。我并没有说在上完课之后我就神功大成天下无敌了，到现在我只是入了个门，开始上路了而已。Tol（幸福课老师）说，让自己更幸福这是毕生的修炼。希望这篇文章可以让你也开始走上更幸福的道路。\n\n## 目录\n\n- **一个简单的人生框架**\n- **为什么要幸福**\n- **基本概念与误区**\n- 环境与乐观主义\n- 关于改变\n- 幸福方法论\n- 寻求自我\n- 爱情\n- 拒绝完美主义\n- 如何成为很厉害的人\n- 自尊\n\n## 一、一个简单的人生框架\n\n你是否遇到过以下体验？\n\n- 有个想法，但是不知道怎么去做\n- 知道怎么去做，但是缺乏执行力\n- 已经在做了，但是时常迷失，失去动力，最后选择放弃\n\n为了解决这些问题，为幸福课打下基础，本章讲述一个大家都知道，但是时常会忘记的框架，即“**目标-理论-方法**”框架（名字我瞎编的），如图\n\n![enter description here][1]\n\n举个例子，比如说我们想要变得强壮，这是一个**目标**，这个时候需要拥有一套能够实现这个目标的严谨**理论**，这套理论围绕实现“变得强壮”这个主题。\n\n了解理论可以通过各种方式（**论文、谷歌、知乎、quora、书籍等等**），我们明白了变强壮的机理、状态变化、优缺点和常用方法等。比如我知道了肌肉增长本质上是肌肉纤维的断裂与生成，知道这个过程需要补充哪些营养，知道肌肉的分布，增肌与减脂的区别，有氧与无氧的区别与各自的作用。\n\n这个时候应当有一些方案产生，我们比较它们的优劣，结合自身的资源（经济、身体条件等），选出了一个最适合我们的方案，这就衍生出了**方法**。\n\n这里的方法不仅仅是“去健身房开练”这么简单的东西，它应当包括计划和阶段性反馈标准等。比如是选择徒手还是健身房，训练的频率如何，不同肌群的训练如何搭配，饮食如何控制，具体到哪个动作如何做，做的时候应该有什么感觉。\n\n到了这一步，事实上我们毫无成绩，是的，因此这个框架有个非常重要的一项准则是——**先动起来**。\n\n接着上面的例子说，假如我们想变强壮，在看过几篇文章后，你就应该已经行动起来了，二话不说健身卡先办了，看的文章里觉得差不多的计划直接去试试。\n\n在动的过程中，你有了疑惑，你去寻找、完善你的理论，通过理论纠正你的方法，改正你的行为。你发现这样的搭配不适合你，你发现这个动作对你来说难度还太大，你发现进步不大原因在于饮食没跟上，你选择更加适合你的饮食习惯。\n\n我想到这里前两个问题的解决方法已经有了眉目了，而第三个问题要在“动起来”之后才会遇到，却是最致命的。解决的方法就在上面那张图上，关键在于**反馈**，即明确自己的目标，提醒自己我是要“变得强壮”，不是来练练给自己心理安慰，8-12RM的意思是力竭不是觉得有点累就可以，不要怕丢脸而去挑战自己还承受不了的重量，我们做的一切都应为“变得强壮”服务。\n\n当然了，有些人做到一半发现这并不是自己想要的，中途更改目标是常有的，但是这不在这个框架的讨论范围内。在这篇文章里这不是什么问题，因为我想极少有人会更改“幸福”这个目标吧。\n\n以上就是这个框架的大致内容，这是一个大家可能都知道的框架，我把它写出来的原因有三：\n\n- 这个框架适用于提升幸福感\n- 我希望给后面的内容提供一个**容器**，一个互相联结的方式，帮助读者更好地理解本文\n- 我坚信这是一个应该贯穿在生活中的方方面面中，成为像我们呼吸一样的存在的习惯，当我们想做某件事，这个流程应当自然而然地浮现出来\n\n我会在后面反复地提到这个框架的应用。这个框架最重要的意义在于一种全面性，无论是只关注干瘪的道理和毫无根据的方法都是不够的，我们需要知道**为什么**，也要知道**怎么做**。\n\n这篇文章提到的大部分理论都是我们所知道的，请不要抱着寻找惊奇的心态来阅读，导言里已经提到了，我们并非不清楚道理，我们只是缺乏逻辑上的**连接**与**整合**。\n\n> common sense is not all that common（常识并不普通）\n\n共勉\n\n## 二、为什么要幸福\n\n首先，我们需要达成一个共识，即我们一生中所做的一切都是为了同一个**终极目的**——幸福。\n\n这种幸福并非指**结局式幸福**，王子与公主在一起了，他拯救了世界，他成为千万富翁。这里的幸福指的是一种稳定的幸福，即**幸福水平**。金钱、地位和权力，这些东西很好，但不是我们的**目标**，它们只是一种达成幸福的**手段**。这里有两张图解释了**结局式幸福**与**幸福水平**的区别。\n\n![enter description here][4]\n![enter description here][5]\n\n**结局式幸福**强调只有成功才能幸福，这也是成功学的主张。而**幸福水平**即《幸福课》认为成功与幸福是并行的，幸福相比于成功需要付出同等甚至更多的努力。\n\n我们听多了富人也常常不幸福的故事，而这两年微博上由于反转幽默却引领着金钱一定会让人快乐的思潮。这两种想法都是错误的，因为事实上经济水平与我们的幸福水平相关度极低，这一点在讲**完美主义**的时候会详细说明。\n \n事实上，一味寻求**结局式幸福**反而可能会降低我们的幸福水平，因为“在最后幸福”的心态常常会转化为“现在的苦是为了将来的幸福”的想法。\n\n**幸福应当是一种长久的状态，我们将来要幸福，并不妨碍现在的幸福。**\n\n那么如何拥有这种状态？\n\n积极心理学家认为，与幸福水平密切相关的是**心理弹性**，这是一种对抗困境的能力。幸福就意味着我们不会伤心难过吗？并不是，而是意味着我们在遭遇困境时能更好更快地恢复。\n\n心理弹性由以下因素组成\n\n- 目标\n- 意义感\n- 乐观主义\n- 榜样\n- 不单干 -> 寻求帮助的能力\n- 承认弱点，承认需要\n- 专注长处\n\n目标。五年十年后我们想成为什么样？我们要做到什么？这给了我们动力。\n\n意义感。帮助他人与帮助社会，将产生自助与他助的上升循环。\n\n榜样。可以是任何人，你告诉自己，你想像他那样，你想变成那样，他会给你力量与方向。\n\n不单干。我们不要告诉自己，我们强大到不需要别人的帮助，我们应该说，我们强大到可以寻求帮助。当然我们需要找到合适的人，能给予我们正确回复的人。\n\n乐观主义。提供了一种自由转换看事情角度的能力，一般来说，我们认为这便是成熟的定义。\n\n承认弱点，承认需要。给自己为人的机会，我们不能对抗自己的人性，我们需要认识它，接受它。\n\n专注长处。这并不意味着忽略短处，而是多问自己，我到底最擅长什么，我能做什么？发掘它，加强它。\n\n**心理弹性**的这些因素在80年代在西方流行起来，并起到了极大的作用，问一下自己，我们具有这些东西吗？后面的章节中会根据这些因素提到如何细化提高我们的心理弹性。\n\n我相信许多人都在潜意识里拒绝幸福，人们推崇“吃得苦中苦，方为人上人”这种理论，事实上更加幸福的我们，将拥有更多精力去实现自我，去爱人与寻求真爱甚至是取得世俗意义上的成功。\n\n我再重申一遍这句话，**我们因幸福而成功，不因成功而幸福**。\n\n## 三、基本概念与误区\n\n### 问题创造现实\n\n做一个小测验，给你20秒，观察下面的图，请数出图中有多少个人\n\n![enter description here][2]\n\n数完了？往下拖动\n\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n- 。\n\n好的，数完了吗，是不是很简单？\n\n那么不要往上拉，请问左起第三个人穿什么颜色的衣服？\n\n回答上来了？很好，请问右起第五个人有胡子吗？\n\n不必为答不上来而羞愧，不管是只回答上来一题或者没有，都是很正常的，人类每天接收大量的信息，不可能对每一条信息都加以分析、加工、存储，**遗忘**与**忽略**是我们的一种习惯，我这里并非要否定这种习惯，事实上当你看完这篇文章或者学完幸福课也不可能获得能回答这种问题的能力，因为当我问出那个问题的时候，我们专注于数人数，其他信息在我们眼里是不存在的。\n\n我想说的是，如果把这两个问题放在前面呢？如果我一开始就提出这两个问题，答案是不是显而易见，是不是跟数人数一样简单？\n\n这便是**正确提问**的重要性，我们问的问题决定了我们的关注点，决定了我们能得到什么信息。换句话说，**问题创造了现实**。\n\n根据Tol老师提供的数据，在研究文献的检索中，**忧郁**与**幸福**这两个关键字的结果比例为21:1，严谨的学术界与世俗界总是对应的，生活中当我们遭遇困境，我们会问，哪里不对了？what's wrong？但是我们极少问，哪里好？what's good？\n\n这并非说我们不应该关注那些不好的，解决问题仍然很重要。但是同时，我们也应该关注那些好的，因为如果我们不关注，它们便**不存在**，而这十分致命，下面有个简单的图可以说明这点\n\n![enter description here][3]\n\n解决问题，消除抑郁，可以有效帮我们从抑郁的状态中摆脱出来，但是它的作用效果只在中间的临界线为止，无法帮我们达到幸福的状态，要达到那种状态，更需要第二种作用力 —— **建立美好**。\n\n那么什么是所谓的关注好的？接着上面的例子，关键在于**提出正确的问题**。如果我们的问题是如何不再忧郁，那么我们只能解决忧郁，并且很多时候只是暂时性的。如果我们的问题是我哪里错了，那我们就看不到我们好的地方。如果我们只问怎么摆脱这样那样的痛苦，那我们永远无法理解苦难的价值。\n\n**问题创造现实**，我们问出怎样的问题，就创造了怎样的世界。我们将在后面的章节中提出一些我们不常问，或是我们选择不去问的问题，由这些问题来创造我们**幸福的基础**。\n\n### 越长大越不幸福？\n\n我们知道人们在年幼时更易觉得幸福。我曾关注的一名重度抑郁症患者写道：“见过婴儿心花怒放之笑，便觉成长格外凄凉。”\n\n为什么？在长大的过程中我们丢失了什么？\n\n有人问米开朗基罗，你是如何创造出《大卫》这般杰作的？米开朗基罗答道，我没有创造它，我到石料厂，在一块石头上看到了《大卫》，而我做的只是把多余的石头去掉而已。\n\n> 把多余的石头去掉\n\n这是对这个问题非常形象的解答，随着年龄的增长，我们并非丢失了什么，而是增加了一些不该存在于我们思想里的**限制**，那个可以更好的你已经存在于你的身体中，你需要做的，就是去掉这些限制，去掉多余的石头，让那个更好的你重现。\n\n> 为学日益，为道日损 —— 《道德经》\n\n面对这一点，我们需要提出两个问题\n\n- 如何去掉这些限制？\n- 如何让更好的我们苏醒？\n\n两个问题缺一不可，上面已经提到正确提问的重要性。我们不能只提第一个问题，即**解决**，我们还要提第二个问题，即**建立**。\n\n梭罗说，人们在沉默地压抑中。弗洛伊德说，人们在舒适地麻木中。也许你受过伤，你选择了关闭心上的门。你为了躲避痛苦也同时不敢寻求快乐，但这是你想要的吗。你想逃避痛苦吗？你想逃避快乐吗？你愿意一直生活在这种状态中吗？或者是你愿意去追逐快乐，去面对痛苦，去让你的人生更加精彩。\n\n**请停止这种舒适的麻木。**\n\n### 健康模型与疾病模型\n\n与传统的解决心理病痛的方式相比，积极心理学提出的是一种类似于预防医学的方式。这便是传统的疾病模型与积极心理学的健康模型，如图为两种模型\n\n![enter description here][6]\n![enter description here][7]\n\n与传统**治病**的理念不同，积极心理学倡导**增强对抗消极的能力**，类似于生理上我们光是遇到病就去治疗并不能让我们变得健康，只有增加体育锻炼，作息与三餐规律才会让我们真正健康，这种健康体现在我们更少得病与在生病时更快恢复。\n\n> 人不会只因为消除了忧愁而快乐\n\n### 幸福是一种随机现象吗\n\n我们需要知道幸福感与基因也有极大的关系。\n\n上个世纪心理学家们找到了一些同卵双胞胎，他们在出生时被分开，在不同的生活环境下成长。结果长大后他们的个性竟十分相似，幸福水平也十分相似，甚至有的娶了名字相同的妻子。\n\n从这个现象中，心理学家在80年代发布了一篇十分著名的论文 —— **幸福是一种随机现象**。\n\n该论文中最后一句话下了这么一个结论：\n\n> 也许想要变得更幸福跟想要变高一样徒劳，这一切早已在我们出生时就注定。\n\n我想许多人常常有一种命运无可抵抗的感觉，那么这个结论是不是证明了我们的努力是徒劳的？是不是无论我们怎么做，我们早晚会走向同一个结局？我们的人生是不是永远无法改变？\n\n不。\n\n当然不。\n\n在那些对双胞胎的研究中，出现了例外，是的，在这里我们必须承认基因的重要性。但是改变是可能的，否则例外何来？改变是很难的，但是这是有可能的。如果我们承认这是所谓的“**命运**”，而承认它并放弃努力，那么很快这会成为一种**自我预言**，我们会在潜意识里告诉自己这是徒劳的，引诱着我们走向不幸福。我们将在后面提到自我预言的重要性以及如何改变它。\n\n基因带给我们的焦虑和忧郁是一种不公平吗？诚然，这让我们的人生艰辛了不少。但是一旦我们克服了它，我们将比没有这种经历的人拥有更细腻的思维和更柔韧的神经。\n\n我们除了幸福还有什么选择？\n\n### no one is coming\n\n这段话在上课的时候对我触动非常大，虽然它属于自尊的内容，但我把它作为一个非常重要的基础来看。这里直接上课程截图\n\n![enter description here][8]\n\n![enter description here][9]\n\n![enter description here][10]\n\n![enter description here][11]\n\n![enter description here][12]\n\n![enter description here][13]\n\n![enter description here][14]\n\n![enter description here][15]\n\n停止抱怨他人，承担起生活的责任来，承担让自己变好的责任，爱自己，让自己变得幸福，你只要也只能靠自己的努力。\n\n\n  [1]: /images/1.png\n  [2]: /images/2.jpg\n  [3]: /images/3.png\n  [4]: /images/4.png\n  [5]: /images/5.png\n  [6]: /images/6.png\n  [7]: /images/7.png\n  [8]: /images/8.png\n  [9]: /images/9.png\n  [10]: /images/10.png\n  [11]: /images/11.png\n  [12]: /images/12.png\n  [13]: /images/13.png\n  [14]: /images/14.png\n  [15]: /images/15.png","slug":"幸福简易教学指南（一）","published":1,"updated":"2016-12-22T13:18:50.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1up2awk0004u4ur6b4jk79f","content":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>我们都听过那句话，“明白很多道理，却还是过不好这一生”。我看到这句话的第一想法是，对啊，但是为什么？为什么道理都讲得很清楚，而我们也懂，但就是改变不了什么？在上完《哈佛幸福课》课程（又名《积极心理学》）后，我渐渐明确了这个问题的解答。之所以道理会无用，并不一定说明它是错的，而是它可能只是<strong>孤零零的道理</strong>。以前有个学长说，念头未转化为行为时，就只是一个念头而已。就好比拿到了个轮子就想骑着上路，当然会摔倒。本文希望提出一套从<strong>理论</strong>、<strong>实例</strong>和<strong>方法论</strong>上都兼顾的<strong>完整体系</strong>，从根本上提供提高我们的幸福水平的可行条件，帮助我们实现自我、找到真爱以及变得更幸福。（PS：配合《哈佛幸福课》食用风味更佳）</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>很长一段时间以来，笔者都深陷在一种难以言明的低落情绪中，即使在没有烦恼的日子里，情绪都极为低落，那种感觉就像陷入了泥潭中，怎么爬也爬不上来。与这种情绪抗争的过程中，我渐渐失去了热情，大概就是觉得无能为力，觉得怎么努力都是不开心。在这个过程中伤害了许多人，如果接着上面的比喻的话，便是拼命抓着其他人的身体想从泥潭里爬出来，却把他们也拉了进来。结果便是在这一年，我与一些以为会是一生伙伴的好朋友渐行渐远，我也彻底失去了一个可能是我的the one的人。在这段至今为止最糟糕的日子里，看《幸福课》，做笔记，践行它的方法，是我最大的能量来源。我可以清晰地感受到我自身的改变，面对我的情绪我不再觉得无能为力，我变得更为乐观，可以平静面对困境，可以说它已经改变了我的人生。我并没有说在上完课之后我就神功大成天下无敌了，到现在我只是入了个门，开始上路了而已。Tol（幸福课老师）说，让自己更幸福这是毕生的修炼。希望这篇文章可以让你也开始走上更幸福的道路。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><strong>一个简单的人生框架</strong></li>\n<li><strong>为什么要幸福</strong></li>\n<li><strong>基本概念与误区</strong></li>\n<li>环境与乐观主义</li>\n<li>关于改变</li>\n<li>幸福方法论</li>\n<li>寻求自我</li>\n<li>爱情</li>\n<li>拒绝完美主义</li>\n<li>如何成为很厉害的人</li>\n<li>自尊</li>\n</ul>\n<h2 id=\"一、一个简单的人生框架\"><a href=\"#一、一个简单的人生框架\" class=\"headerlink\" title=\"一、一个简单的人生框架\"></a>一、一个简单的人生框架</h2><p>你是否遇到过以下体验？</p>\n<ul>\n<li>有个想法，但是不知道怎么去做</li>\n<li>知道怎么去做，但是缺乏执行力</li>\n<li>已经在做了，但是时常迷失，失去动力，最后选择放弃</li>\n</ul>\n<p>为了解决这些问题，为幸福课打下基础，本章讲述一个大家都知道，但是时常会忘记的框架，即“<strong>目标-理论-方法</strong>”框架（名字我瞎编的），如图</p>\n<p><img src=\"/images/1.png\" alt=\"enter description here\"></p>\n<p>举个例子，比如说我们想要变得强壮，这是一个<strong>目标</strong>，这个时候需要拥有一套能够实现这个目标的严谨<strong>理论</strong>，这套理论围绕实现“变得强壮”这个主题。</p>\n<p>了解理论可以通过各种方式（<strong>论文、谷歌、知乎、quora、书籍等等</strong>），我们明白了变强壮的机理、状态变化、优缺点和常用方法等。比如我知道了肌肉增长本质上是肌肉纤维的断裂与生成，知道这个过程需要补充哪些营养，知道肌肉的分布，增肌与减脂的区别，有氧与无氧的区别与各自的作用。</p>\n<p>这个时候应当有一些方案产生，我们比较它们的优劣，结合自身的资源（经济、身体条件等），选出了一个最适合我们的方案，这就衍生出了<strong>方法</strong>。</p>\n<p>这里的方法不仅仅是“去健身房开练”这么简单的东西，它应当包括计划和阶段性反馈标准等。比如是选择徒手还是健身房，训练的频率如何，不同肌群的训练如何搭配，饮食如何控制，具体到哪个动作如何做，做的时候应该有什么感觉。</p>\n<p>到了这一步，事实上我们毫无成绩，是的，因此这个框架有个非常重要的一项准则是——<strong>先动起来</strong>。</p>\n<p>接着上面的例子说，假如我们想变强壮，在看过几篇文章后，你就应该已经行动起来了，二话不说健身卡先办了，看的文章里觉得差不多的计划直接去试试。</p>\n<p>在动的过程中，你有了疑惑，你去寻找、完善你的理论，通过理论纠正你的方法，改正你的行为。你发现这样的搭配不适合你，你发现这个动作对你来说难度还太大，你发现进步不大原因在于饮食没跟上，你选择更加适合你的饮食习惯。</p>\n<p>我想到这里前两个问题的解决方法已经有了眉目了，而第三个问题要在“动起来”之后才会遇到，却是最致命的。解决的方法就在上面那张图上，关键在于<strong>反馈</strong>，即明确自己的目标，提醒自己我是要“变得强壮”，不是来练练给自己心理安慰，8-12RM的意思是力竭不是觉得有点累就可以，不要怕丢脸而去挑战自己还承受不了的重量，我们做的一切都应为“变得强壮”服务。</p>\n<p>当然了，有些人做到一半发现这并不是自己想要的，中途更改目标是常有的，但是这不在这个框架的讨论范围内。在这篇文章里这不是什么问题，因为我想极少有人会更改“幸福”这个目标吧。</p>\n<p>以上就是这个框架的大致内容，这是一个大家可能都知道的框架，我把它写出来的原因有三：</p>\n<ul>\n<li>这个框架适用于提升幸福感</li>\n<li>我希望给后面的内容提供一个<strong>容器</strong>，一个互相联结的方式，帮助读者更好地理解本文</li>\n<li>我坚信这是一个应该贯穿在生活中的方方面面中，成为像我们呼吸一样的存在的习惯，当我们想做某件事，这个流程应当自然而然地浮现出来</li>\n</ul>\n<p>我会在后面反复地提到这个框架的应用。这个框架最重要的意义在于一种全面性，无论是只关注干瘪的道理和毫无根据的方法都是不够的，我们需要知道<strong>为什么</strong>，也要知道<strong>怎么做</strong>。</p>\n<p>这篇文章提到的大部分理论都是我们所知道的，请不要抱着寻找惊奇的心态来阅读，导言里已经提到了，我们并非不清楚道理，我们只是缺乏逻辑上的<strong>连接</strong>与<strong>整合</strong>。</p>\n<blockquote>\n<p>common sense is not all that common（常识并不普通）</p>\n</blockquote>\n<p>共勉</p>\n<h2 id=\"二、为什么要幸福\"><a href=\"#二、为什么要幸福\" class=\"headerlink\" title=\"二、为什么要幸福\"></a>二、为什么要幸福</h2><p>首先，我们需要达成一个共识，即我们一生中所做的一切都是为了同一个<strong>终极目的</strong>——幸福。</p>\n<p>这种幸福并非指<strong>结局式幸福</strong>，王子与公主在一起了，他拯救了世界，他成为千万富翁。这里的幸福指的是一种稳定的幸福，即<strong>幸福水平</strong>。金钱、地位和权力，这些东西很好，但不是我们的<strong>目标</strong>，它们只是一种达成幸福的<strong>手段</strong>。这里有两张图解释了<strong>结局式幸福</strong>与<strong>幸福水平</strong>的区别。</p>\n<p><img src=\"/images/4.png\" alt=\"enter description here\"><br><img src=\"/images/5.png\" alt=\"enter description here\"></p>\n<p><strong>结局式幸福</strong>强调只有成功才能幸福，这也是成功学的主张。而<strong>幸福水平</strong>即《幸福课》认为成功与幸福是并行的，幸福相比于成功需要付出同等甚至更多的努力。</p>\n<p>我们听多了富人也常常不幸福的故事，而这两年微博上由于反转幽默却引领着金钱一定会让人快乐的思潮。这两种想法都是错误的，因为事实上经济水平与我们的幸福水平相关度极低，这一点在讲<strong>完美主义</strong>的时候会详细说明。</p>\n<p>事实上，一味寻求<strong>结局式幸福</strong>反而可能会降低我们的幸福水平，因为“在最后幸福”的心态常常会转化为“现在的苦是为了将来的幸福”的想法。</p>\n<p><strong>幸福应当是一种长久的状态，我们将来要幸福，并不妨碍现在的幸福。</strong></p>\n<p>那么如何拥有这种状态？</p>\n<p>积极心理学家认为，与幸福水平密切相关的是<strong>心理弹性</strong>，这是一种对抗困境的能力。幸福就意味着我们不会伤心难过吗？并不是，而是意味着我们在遭遇困境时能更好更快地恢复。</p>\n<p>心理弹性由以下因素组成</p>\n<ul>\n<li>目标</li>\n<li>意义感</li>\n<li>乐观主义</li>\n<li>榜样</li>\n<li>不单干 -&gt; 寻求帮助的能力</li>\n<li>承认弱点，承认需要</li>\n<li>专注长处</li>\n</ul>\n<p>目标。五年十年后我们想成为什么样？我们要做到什么？这给了我们动力。</p>\n<p>意义感。帮助他人与帮助社会，将产生自助与他助的上升循环。</p>\n<p>榜样。可以是任何人，你告诉自己，你想像他那样，你想变成那样，他会给你力量与方向。</p>\n<p>不单干。我们不要告诉自己，我们强大到不需要别人的帮助，我们应该说，我们强大到可以寻求帮助。当然我们需要找到合适的人，能给予我们正确回复的人。</p>\n<p>乐观主义。提供了一种自由转换看事情角度的能力，一般来说，我们认为这便是成熟的定义。</p>\n<p>承认弱点，承认需要。给自己为人的机会，我们不能对抗自己的人性，我们需要认识它，接受它。</p>\n<p>专注长处。这并不意味着忽略短处，而是多问自己，我到底最擅长什么，我能做什么？发掘它，加强它。</p>\n<p><strong>心理弹性</strong>的这些因素在80年代在西方流行起来，并起到了极大的作用，问一下自己，我们具有这些东西吗？后面的章节中会根据这些因素提到如何细化提高我们的心理弹性。</p>\n<p>我相信许多人都在潜意识里拒绝幸福，人们推崇“吃得苦中苦，方为人上人”这种理论，事实上更加幸福的我们，将拥有更多精力去实现自我，去爱人与寻求真爱甚至是取得世俗意义上的成功。</p>\n<p>我再重申一遍这句话，<strong>我们因幸福而成功，不因成功而幸福</strong>。</p>\n<h2 id=\"三、基本概念与误区\"><a href=\"#三、基本概念与误区\" class=\"headerlink\" title=\"三、基本概念与误区\"></a>三、基本概念与误区</h2><h3 id=\"问题创造现实\"><a href=\"#问题创造现实\" class=\"headerlink\" title=\"问题创造现实\"></a>问题创造现实</h3><p>做一个小测验，给你20秒，观察下面的图，请数出图中有多少个人</p>\n<p><img src=\"/images/2.jpg\" alt=\"enter description here\"></p>\n<p>数完了？往下拖动</p>\n<ul>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n</ul>\n<p>好的，数完了吗，是不是很简单？</p>\n<p>那么不要往上拉，请问左起第三个人穿什么颜色的衣服？</p>\n<p>回答上来了？很好，请问右起第五个人有胡子吗？</p>\n<p>不必为答不上来而羞愧，不管是只回答上来一题或者没有，都是很正常的，人类每天接收大量的信息，不可能对每一条信息都加以分析、加工、存储，<strong>遗忘</strong>与<strong>忽略</strong>是我们的一种习惯，我这里并非要否定这种习惯，事实上当你看完这篇文章或者学完幸福课也不可能获得能回答这种问题的能力，因为当我问出那个问题的时候，我们专注于数人数，其他信息在我们眼里是不存在的。</p>\n<p>我想说的是，如果把这两个问题放在前面呢？如果我一开始就提出这两个问题，答案是不是显而易见，是不是跟数人数一样简单？</p>\n<p>这便是<strong>正确提问</strong>的重要性，我们问的问题决定了我们的关注点，决定了我们能得到什么信息。换句话说，<strong>问题创造了现实</strong>。</p>\n<p>根据Tol老师提供的数据，在研究文献的检索中，<strong>忧郁</strong>与<strong>幸福</strong>这两个关键字的结果比例为21:1，严谨的学术界与世俗界总是对应的，生活中当我们遭遇困境，我们会问，哪里不对了？what’s wrong？但是我们极少问，哪里好？what’s good？</p>\n<p>这并非说我们不应该关注那些不好的，解决问题仍然很重要。但是同时，我们也应该关注那些好的，因为如果我们不关注，它们便<strong>不存在</strong>，而这十分致命，下面有个简单的图可以说明这点</p>\n<p><img src=\"/images/3.png\" alt=\"enter description here\"></p>\n<p>解决问题，消除抑郁，可以有效帮我们从抑郁的状态中摆脱出来，但是它的作用效果只在中间的临界线为止，无法帮我们达到幸福的状态，要达到那种状态，更需要第二种作用力 —— <strong>建立美好</strong>。</p>\n<p>那么什么是所谓的关注好的？接着上面的例子，关键在于<strong>提出正确的问题</strong>。如果我们的问题是如何不再忧郁，那么我们只能解决忧郁，并且很多时候只是暂时性的。如果我们的问题是我哪里错了，那我们就看不到我们好的地方。如果我们只问怎么摆脱这样那样的痛苦，那我们永远无法理解苦难的价值。</p>\n<p><strong>问题创造现实</strong>，我们问出怎样的问题，就创造了怎样的世界。我们将在后面的章节中提出一些我们不常问，或是我们选择不去问的问题，由这些问题来创造我们<strong>幸福的基础</strong>。</p>\n<h3 id=\"越长大越不幸福？\"><a href=\"#越长大越不幸福？\" class=\"headerlink\" title=\"越长大越不幸福？\"></a>越长大越不幸福？</h3><p>我们知道人们在年幼时更易觉得幸福。我曾关注的一名重度抑郁症患者写道：“见过婴儿心花怒放之笑，便觉成长格外凄凉。”</p>\n<p>为什么？在长大的过程中我们丢失了什么？</p>\n<p>有人问米开朗基罗，你是如何创造出《大卫》这般杰作的？米开朗基罗答道，我没有创造它，我到石料厂，在一块石头上看到了《大卫》，而我做的只是把多余的石头去掉而已。</p>\n<blockquote>\n<p>把多余的石头去掉</p>\n</blockquote>\n<p>这是对这个问题非常形象的解答，随着年龄的增长，我们并非丢失了什么，而是增加了一些不该存在于我们思想里的<strong>限制</strong>，那个可以更好的你已经存在于你的身体中，你需要做的，就是去掉这些限制，去掉多余的石头，让那个更好的你重现。</p>\n<blockquote>\n<p>为学日益，为道日损 —— 《道德经》</p>\n</blockquote>\n<p>面对这一点，我们需要提出两个问题</p>\n<ul>\n<li>如何去掉这些限制？</li>\n<li>如何让更好的我们苏醒？</li>\n</ul>\n<p>两个问题缺一不可，上面已经提到正确提问的重要性。我们不能只提第一个问题，即<strong>解决</strong>，我们还要提第二个问题，即<strong>建立</strong>。</p>\n<p>梭罗说，人们在沉默地压抑中。弗洛伊德说，人们在舒适地麻木中。也许你受过伤，你选择了关闭心上的门。你为了躲避痛苦也同时不敢寻求快乐，但这是你想要的吗。你想逃避痛苦吗？你想逃避快乐吗？你愿意一直生活在这种状态中吗？或者是你愿意去追逐快乐，去面对痛苦，去让你的人生更加精彩。</p>\n<p><strong>请停止这种舒适的麻木。</strong></p>\n<h3 id=\"健康模型与疾病模型\"><a href=\"#健康模型与疾病模型\" class=\"headerlink\" title=\"健康模型与疾病模型\"></a>健康模型与疾病模型</h3><p>与传统的解决心理病痛的方式相比，积极心理学提出的是一种类似于预防医学的方式。这便是传统的疾病模型与积极心理学的健康模型，如图为两种模型</p>\n<p><img src=\"/images/6.png\" alt=\"enter description here\"><br><img src=\"/images/7.png\" alt=\"enter description here\"></p>\n<p>与传统<strong>治病</strong>的理念不同，积极心理学倡导<strong>增强对抗消极的能力</strong>，类似于生理上我们光是遇到病就去治疗并不能让我们变得健康，只有增加体育锻炼，作息与三餐规律才会让我们真正健康，这种健康体现在我们更少得病与在生病时更快恢复。</p>\n<blockquote>\n<p>人不会只因为消除了忧愁而快乐</p>\n</blockquote>\n<h3 id=\"幸福是一种随机现象吗\"><a href=\"#幸福是一种随机现象吗\" class=\"headerlink\" title=\"幸福是一种随机现象吗\"></a>幸福是一种随机现象吗</h3><p>我们需要知道幸福感与基因也有极大的关系。</p>\n<p>上个世纪心理学家们找到了一些同卵双胞胎，他们在出生时被分开，在不同的生活环境下成长。结果长大后他们的个性竟十分相似，幸福水平也十分相似，甚至有的娶了名字相同的妻子。</p>\n<p>从这个现象中，心理学家在80年代发布了一篇十分著名的论文 —— <strong>幸福是一种随机现象</strong>。</p>\n<p>该论文中最后一句话下了这么一个结论：</p>\n<blockquote>\n<p>也许想要变得更幸福跟想要变高一样徒劳，这一切早已在我们出生时就注定。</p>\n</blockquote>\n<p>我想许多人常常有一种命运无可抵抗的感觉，那么这个结论是不是证明了我们的努力是徒劳的？是不是无论我们怎么做，我们早晚会走向同一个结局？我们的人生是不是永远无法改变？</p>\n<p>不。</p>\n<p>当然不。</p>\n<p>在那些对双胞胎的研究中，出现了例外，是的，在这里我们必须承认基因的重要性。但是改变是可能的，否则例外何来？改变是很难的，但是这是有可能的。如果我们承认这是所谓的“<strong>命运</strong>”，而承认它并放弃努力，那么很快这会成为一种<strong>自我预言</strong>，我们会在潜意识里告诉自己这是徒劳的，引诱着我们走向不幸福。我们将在后面提到自我预言的重要性以及如何改变它。</p>\n<p>基因带给我们的焦虑和忧郁是一种不公平吗？诚然，这让我们的人生艰辛了不少。但是一旦我们克服了它，我们将比没有这种经历的人拥有更细腻的思维和更柔韧的神经。</p>\n<p>我们除了幸福还有什么选择？</p>\n<h3 id=\"no-one-is-coming\"><a href=\"#no-one-is-coming\" class=\"headerlink\" title=\"no one is coming\"></a>no one is coming</h3><p>这段话在上课的时候对我触动非常大，虽然它属于自尊的内容，但我把它作为一个非常重要的基础来看。这里直接上课程截图</p>\n<p><img src=\"/images/8.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/9.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/10.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/11.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/12.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/13.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/14.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/15.png\" alt=\"enter description here\"></p>\n<p>停止抱怨他人，承担起生活的责任来，承担让自己变好的责任，爱自己，让自己变得幸福，你只要也只能靠自己的努力。</p>\n","excerpt":"","more":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>我们都听过那句话，“明白很多道理，却还是过不好这一生”。我看到这句话的第一想法是，对啊，但是为什么？为什么道理都讲得很清楚，而我们也懂，但就是改变不了什么？在上完《哈佛幸福课》课程（又名《积极心理学》）后，我渐渐明确了这个问题的解答。之所以道理会无用，并不一定说明它是错的，而是它可能只是<strong>孤零零的道理</strong>。以前有个学长说，念头未转化为行为时，就只是一个念头而已。就好比拿到了个轮子就想骑着上路，当然会摔倒。本文希望提出一套从<strong>理论</strong>、<strong>实例</strong>和<strong>方法论</strong>上都兼顾的<strong>完整体系</strong>，从根本上提供提高我们的幸福水平的可行条件，帮助我们实现自我、找到真爱以及变得更幸福。（PS：配合《哈佛幸福课》食用风味更佳）</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>很长一段时间以来，笔者都深陷在一种难以言明的低落情绪中，即使在没有烦恼的日子里，情绪都极为低落，那种感觉就像陷入了泥潭中，怎么爬也爬不上来。与这种情绪抗争的过程中，我渐渐失去了热情，大概就是觉得无能为力，觉得怎么努力都是不开心。在这个过程中伤害了许多人，如果接着上面的比喻的话，便是拼命抓着其他人的身体想从泥潭里爬出来，却把他们也拉了进来。结果便是在这一年，我与一些以为会是一生伙伴的好朋友渐行渐远，我也彻底失去了一个可能是我的the one的人。在这段至今为止最糟糕的日子里，看《幸福课》，做笔记，践行它的方法，是我最大的能量来源。我可以清晰地感受到我自身的改变，面对我的情绪我不再觉得无能为力，我变得更为乐观，可以平静面对困境，可以说它已经改变了我的人生。我并没有说在上完课之后我就神功大成天下无敌了，到现在我只是入了个门，开始上路了而已。Tol（幸福课老师）说，让自己更幸福这是毕生的修炼。希望这篇文章可以让你也开始走上更幸福的道路。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><strong>一个简单的人生框架</strong></li>\n<li><strong>为什么要幸福</strong></li>\n<li><strong>基本概念与误区</strong></li>\n<li>环境与乐观主义</li>\n<li>关于改变</li>\n<li>幸福方法论</li>\n<li>寻求自我</li>\n<li>爱情</li>\n<li>拒绝完美主义</li>\n<li>如何成为很厉害的人</li>\n<li>自尊</li>\n</ul>\n<h2 id=\"一、一个简单的人生框架\"><a href=\"#一、一个简单的人生框架\" class=\"headerlink\" title=\"一、一个简单的人生框架\"></a>一、一个简单的人生框架</h2><p>你是否遇到过以下体验？</p>\n<ul>\n<li>有个想法，但是不知道怎么去做</li>\n<li>知道怎么去做，但是缺乏执行力</li>\n<li>已经在做了，但是时常迷失，失去动力，最后选择放弃</li>\n</ul>\n<p>为了解决这些问题，为幸福课打下基础，本章讲述一个大家都知道，但是时常会忘记的框架，即“<strong>目标-理论-方法</strong>”框架（名字我瞎编的），如图</p>\n<p><img src=\"/images/1.png\" alt=\"enter description here\"></p>\n<p>举个例子，比如说我们想要变得强壮，这是一个<strong>目标</strong>，这个时候需要拥有一套能够实现这个目标的严谨<strong>理论</strong>，这套理论围绕实现“变得强壮”这个主题。</p>\n<p>了解理论可以通过各种方式（<strong>论文、谷歌、知乎、quora、书籍等等</strong>），我们明白了变强壮的机理、状态变化、优缺点和常用方法等。比如我知道了肌肉增长本质上是肌肉纤维的断裂与生成，知道这个过程需要补充哪些营养，知道肌肉的分布，增肌与减脂的区别，有氧与无氧的区别与各自的作用。</p>\n<p>这个时候应当有一些方案产生，我们比较它们的优劣，结合自身的资源（经济、身体条件等），选出了一个最适合我们的方案，这就衍生出了<strong>方法</strong>。</p>\n<p>这里的方法不仅仅是“去健身房开练”这么简单的东西，它应当包括计划和阶段性反馈标准等。比如是选择徒手还是健身房，训练的频率如何，不同肌群的训练如何搭配，饮食如何控制，具体到哪个动作如何做，做的时候应该有什么感觉。</p>\n<p>到了这一步，事实上我们毫无成绩，是的，因此这个框架有个非常重要的一项准则是——<strong>先动起来</strong>。</p>\n<p>接着上面的例子说，假如我们想变强壮，在看过几篇文章后，你就应该已经行动起来了，二话不说健身卡先办了，看的文章里觉得差不多的计划直接去试试。</p>\n<p>在动的过程中，你有了疑惑，你去寻找、完善你的理论，通过理论纠正你的方法，改正你的行为。你发现这样的搭配不适合你，你发现这个动作对你来说难度还太大，你发现进步不大原因在于饮食没跟上，你选择更加适合你的饮食习惯。</p>\n<p>我想到这里前两个问题的解决方法已经有了眉目了，而第三个问题要在“动起来”之后才会遇到，却是最致命的。解决的方法就在上面那张图上，关键在于<strong>反馈</strong>，即明确自己的目标，提醒自己我是要“变得强壮”，不是来练练给自己心理安慰，8-12RM的意思是力竭不是觉得有点累就可以，不要怕丢脸而去挑战自己还承受不了的重量，我们做的一切都应为“变得强壮”服务。</p>\n<p>当然了，有些人做到一半发现这并不是自己想要的，中途更改目标是常有的，但是这不在这个框架的讨论范围内。在这篇文章里这不是什么问题，因为我想极少有人会更改“幸福”这个目标吧。</p>\n<p>以上就是这个框架的大致内容，这是一个大家可能都知道的框架，我把它写出来的原因有三：</p>\n<ul>\n<li>这个框架适用于提升幸福感</li>\n<li>我希望给后面的内容提供一个<strong>容器</strong>，一个互相联结的方式，帮助读者更好地理解本文</li>\n<li>我坚信这是一个应该贯穿在生活中的方方面面中，成为像我们呼吸一样的存在的习惯，当我们想做某件事，这个流程应当自然而然地浮现出来</li>\n</ul>\n<p>我会在后面反复地提到这个框架的应用。这个框架最重要的意义在于一种全面性，无论是只关注干瘪的道理和毫无根据的方法都是不够的，我们需要知道<strong>为什么</strong>，也要知道<strong>怎么做</strong>。</p>\n<p>这篇文章提到的大部分理论都是我们所知道的，请不要抱着寻找惊奇的心态来阅读，导言里已经提到了，我们并非不清楚道理，我们只是缺乏逻辑上的<strong>连接</strong>与<strong>整合</strong>。</p>\n<blockquote>\n<p>common sense is not all that common（常识并不普通）</p>\n</blockquote>\n<p>共勉</p>\n<h2 id=\"二、为什么要幸福\"><a href=\"#二、为什么要幸福\" class=\"headerlink\" title=\"二、为什么要幸福\"></a>二、为什么要幸福</h2><p>首先，我们需要达成一个共识，即我们一生中所做的一切都是为了同一个<strong>终极目的</strong>——幸福。</p>\n<p>这种幸福并非指<strong>结局式幸福</strong>，王子与公主在一起了，他拯救了世界，他成为千万富翁。这里的幸福指的是一种稳定的幸福，即<strong>幸福水平</strong>。金钱、地位和权力，这些东西很好，但不是我们的<strong>目标</strong>，它们只是一种达成幸福的<strong>手段</strong>。这里有两张图解释了<strong>结局式幸福</strong>与<strong>幸福水平</strong>的区别。</p>\n<p><img src=\"/images/4.png\" alt=\"enter description here\"><br><img src=\"/images/5.png\" alt=\"enter description here\"></p>\n<p><strong>结局式幸福</strong>强调只有成功才能幸福，这也是成功学的主张。而<strong>幸福水平</strong>即《幸福课》认为成功与幸福是并行的，幸福相比于成功需要付出同等甚至更多的努力。</p>\n<p>我们听多了富人也常常不幸福的故事，而这两年微博上由于反转幽默却引领着金钱一定会让人快乐的思潮。这两种想法都是错误的，因为事实上经济水平与我们的幸福水平相关度极低，这一点在讲<strong>完美主义</strong>的时候会详细说明。</p>\n<p>事实上，一味寻求<strong>结局式幸福</strong>反而可能会降低我们的幸福水平，因为“在最后幸福”的心态常常会转化为“现在的苦是为了将来的幸福”的想法。</p>\n<p><strong>幸福应当是一种长久的状态，我们将来要幸福，并不妨碍现在的幸福。</strong></p>\n<p>那么如何拥有这种状态？</p>\n<p>积极心理学家认为，与幸福水平密切相关的是<strong>心理弹性</strong>，这是一种对抗困境的能力。幸福就意味着我们不会伤心难过吗？并不是，而是意味着我们在遭遇困境时能更好更快地恢复。</p>\n<p>心理弹性由以下因素组成</p>\n<ul>\n<li>目标</li>\n<li>意义感</li>\n<li>乐观主义</li>\n<li>榜样</li>\n<li>不单干 -&gt; 寻求帮助的能力</li>\n<li>承认弱点，承认需要</li>\n<li>专注长处</li>\n</ul>\n<p>目标。五年十年后我们想成为什么样？我们要做到什么？这给了我们动力。</p>\n<p>意义感。帮助他人与帮助社会，将产生自助与他助的上升循环。</p>\n<p>榜样。可以是任何人，你告诉自己，你想像他那样，你想变成那样，他会给你力量与方向。</p>\n<p>不单干。我们不要告诉自己，我们强大到不需要别人的帮助，我们应该说，我们强大到可以寻求帮助。当然我们需要找到合适的人，能给予我们正确回复的人。</p>\n<p>乐观主义。提供了一种自由转换看事情角度的能力，一般来说，我们认为这便是成熟的定义。</p>\n<p>承认弱点，承认需要。给自己为人的机会，我们不能对抗自己的人性，我们需要认识它，接受它。</p>\n<p>专注长处。这并不意味着忽略短处，而是多问自己，我到底最擅长什么，我能做什么？发掘它，加强它。</p>\n<p><strong>心理弹性</strong>的这些因素在80年代在西方流行起来，并起到了极大的作用，问一下自己，我们具有这些东西吗？后面的章节中会根据这些因素提到如何细化提高我们的心理弹性。</p>\n<p>我相信许多人都在潜意识里拒绝幸福，人们推崇“吃得苦中苦，方为人上人”这种理论，事实上更加幸福的我们，将拥有更多精力去实现自我，去爱人与寻求真爱甚至是取得世俗意义上的成功。</p>\n<p>我再重申一遍这句话，<strong>我们因幸福而成功，不因成功而幸福</strong>。</p>\n<h2 id=\"三、基本概念与误区\"><a href=\"#三、基本概念与误区\" class=\"headerlink\" title=\"三、基本概念与误区\"></a>三、基本概念与误区</h2><h3 id=\"问题创造现实\"><a href=\"#问题创造现实\" class=\"headerlink\" title=\"问题创造现实\"></a>问题创造现实</h3><p>做一个小测验，给你20秒，观察下面的图，请数出图中有多少个人</p>\n<p><img src=\"/images/2.jpg\" alt=\"enter description here\"></p>\n<p>数完了？往下拖动</p>\n<ul>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n<li>。</li>\n</ul>\n<p>好的，数完了吗，是不是很简单？</p>\n<p>那么不要往上拉，请问左起第三个人穿什么颜色的衣服？</p>\n<p>回答上来了？很好，请问右起第五个人有胡子吗？</p>\n<p>不必为答不上来而羞愧，不管是只回答上来一题或者没有，都是很正常的，人类每天接收大量的信息，不可能对每一条信息都加以分析、加工、存储，<strong>遗忘</strong>与<strong>忽略</strong>是我们的一种习惯，我这里并非要否定这种习惯，事实上当你看完这篇文章或者学完幸福课也不可能获得能回答这种问题的能力，因为当我问出那个问题的时候，我们专注于数人数，其他信息在我们眼里是不存在的。</p>\n<p>我想说的是，如果把这两个问题放在前面呢？如果我一开始就提出这两个问题，答案是不是显而易见，是不是跟数人数一样简单？</p>\n<p>这便是<strong>正确提问</strong>的重要性，我们问的问题决定了我们的关注点，决定了我们能得到什么信息。换句话说，<strong>问题创造了现实</strong>。</p>\n<p>根据Tol老师提供的数据，在研究文献的检索中，<strong>忧郁</strong>与<strong>幸福</strong>这两个关键字的结果比例为21:1，严谨的学术界与世俗界总是对应的，生活中当我们遭遇困境，我们会问，哪里不对了？what’s wrong？但是我们极少问，哪里好？what’s good？</p>\n<p>这并非说我们不应该关注那些不好的，解决问题仍然很重要。但是同时，我们也应该关注那些好的，因为如果我们不关注，它们便<strong>不存在</strong>，而这十分致命，下面有个简单的图可以说明这点</p>\n<p><img src=\"/images/3.png\" alt=\"enter description here\"></p>\n<p>解决问题，消除抑郁，可以有效帮我们从抑郁的状态中摆脱出来，但是它的作用效果只在中间的临界线为止，无法帮我们达到幸福的状态，要达到那种状态，更需要第二种作用力 —— <strong>建立美好</strong>。</p>\n<p>那么什么是所谓的关注好的？接着上面的例子，关键在于<strong>提出正确的问题</strong>。如果我们的问题是如何不再忧郁，那么我们只能解决忧郁，并且很多时候只是暂时性的。如果我们的问题是我哪里错了，那我们就看不到我们好的地方。如果我们只问怎么摆脱这样那样的痛苦，那我们永远无法理解苦难的价值。</p>\n<p><strong>问题创造现实</strong>，我们问出怎样的问题，就创造了怎样的世界。我们将在后面的章节中提出一些我们不常问，或是我们选择不去问的问题，由这些问题来创造我们<strong>幸福的基础</strong>。</p>\n<h3 id=\"越长大越不幸福？\"><a href=\"#越长大越不幸福？\" class=\"headerlink\" title=\"越长大越不幸福？\"></a>越长大越不幸福？</h3><p>我们知道人们在年幼时更易觉得幸福。我曾关注的一名重度抑郁症患者写道：“见过婴儿心花怒放之笑，便觉成长格外凄凉。”</p>\n<p>为什么？在长大的过程中我们丢失了什么？</p>\n<p>有人问米开朗基罗，你是如何创造出《大卫》这般杰作的？米开朗基罗答道，我没有创造它，我到石料厂，在一块石头上看到了《大卫》，而我做的只是把多余的石头去掉而已。</p>\n<blockquote>\n<p>把多余的石头去掉</p>\n</blockquote>\n<p>这是对这个问题非常形象的解答，随着年龄的增长，我们并非丢失了什么，而是增加了一些不该存在于我们思想里的<strong>限制</strong>，那个可以更好的你已经存在于你的身体中，你需要做的，就是去掉这些限制，去掉多余的石头，让那个更好的你重现。</p>\n<blockquote>\n<p>为学日益，为道日损 —— 《道德经》</p>\n</blockquote>\n<p>面对这一点，我们需要提出两个问题</p>\n<ul>\n<li>如何去掉这些限制？</li>\n<li>如何让更好的我们苏醒？</li>\n</ul>\n<p>两个问题缺一不可，上面已经提到正确提问的重要性。我们不能只提第一个问题，即<strong>解决</strong>，我们还要提第二个问题，即<strong>建立</strong>。</p>\n<p>梭罗说，人们在沉默地压抑中。弗洛伊德说，人们在舒适地麻木中。也许你受过伤，你选择了关闭心上的门。你为了躲避痛苦也同时不敢寻求快乐，但这是你想要的吗。你想逃避痛苦吗？你想逃避快乐吗？你愿意一直生活在这种状态中吗？或者是你愿意去追逐快乐，去面对痛苦，去让你的人生更加精彩。</p>\n<p><strong>请停止这种舒适的麻木。</strong></p>\n<h3 id=\"健康模型与疾病模型\"><a href=\"#健康模型与疾病模型\" class=\"headerlink\" title=\"健康模型与疾病模型\"></a>健康模型与疾病模型</h3><p>与传统的解决心理病痛的方式相比，积极心理学提出的是一种类似于预防医学的方式。这便是传统的疾病模型与积极心理学的健康模型，如图为两种模型</p>\n<p><img src=\"/images/6.png\" alt=\"enter description here\"><br><img src=\"/images/7.png\" alt=\"enter description here\"></p>\n<p>与传统<strong>治病</strong>的理念不同，积极心理学倡导<strong>增强对抗消极的能力</strong>，类似于生理上我们光是遇到病就去治疗并不能让我们变得健康，只有增加体育锻炼，作息与三餐规律才会让我们真正健康，这种健康体现在我们更少得病与在生病时更快恢复。</p>\n<blockquote>\n<p>人不会只因为消除了忧愁而快乐</p>\n</blockquote>\n<h3 id=\"幸福是一种随机现象吗\"><a href=\"#幸福是一种随机现象吗\" class=\"headerlink\" title=\"幸福是一种随机现象吗\"></a>幸福是一种随机现象吗</h3><p>我们需要知道幸福感与基因也有极大的关系。</p>\n<p>上个世纪心理学家们找到了一些同卵双胞胎，他们在出生时被分开，在不同的生活环境下成长。结果长大后他们的个性竟十分相似，幸福水平也十分相似，甚至有的娶了名字相同的妻子。</p>\n<p>从这个现象中，心理学家在80年代发布了一篇十分著名的论文 —— <strong>幸福是一种随机现象</strong>。</p>\n<p>该论文中最后一句话下了这么一个结论：</p>\n<blockquote>\n<p>也许想要变得更幸福跟想要变高一样徒劳，这一切早已在我们出生时就注定。</p>\n</blockquote>\n<p>我想许多人常常有一种命运无可抵抗的感觉，那么这个结论是不是证明了我们的努力是徒劳的？是不是无论我们怎么做，我们早晚会走向同一个结局？我们的人生是不是永远无法改变？</p>\n<p>不。</p>\n<p>当然不。</p>\n<p>在那些对双胞胎的研究中，出现了例外，是的，在这里我们必须承认基因的重要性。但是改变是可能的，否则例外何来？改变是很难的，但是这是有可能的。如果我们承认这是所谓的“<strong>命运</strong>”，而承认它并放弃努力，那么很快这会成为一种<strong>自我预言</strong>，我们会在潜意识里告诉自己这是徒劳的，引诱着我们走向不幸福。我们将在后面提到自我预言的重要性以及如何改变它。</p>\n<p>基因带给我们的焦虑和忧郁是一种不公平吗？诚然，这让我们的人生艰辛了不少。但是一旦我们克服了它，我们将比没有这种经历的人拥有更细腻的思维和更柔韧的神经。</p>\n<p>我们除了幸福还有什么选择？</p>\n<h3 id=\"no-one-is-coming\"><a href=\"#no-one-is-coming\" class=\"headerlink\" title=\"no one is coming\"></a>no one is coming</h3><p>这段话在上课的时候对我触动非常大，虽然它属于自尊的内容，但我把它作为一个非常重要的基础来看。这里直接上课程截图</p>\n<p><img src=\"/images/8.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/9.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/10.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/11.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/12.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/13.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/14.png\" alt=\"enter description here\"></p>\n<p><img src=\"/images/15.png\" alt=\"enter description here\"></p>\n<p>停止抱怨他人，承担起生活的责任来，承担让自己变好的责任，爱自己，让自己变得幸福，你只要也只能靠自己的努力。</p>\n"},{"title":"时间旅行者","date":"2017-01-06T11:08:23.000Z","_content":"听说王去世的消息我是十分震惊的。\n\n这并非是那种朋友去世时的不愿相信的感觉驱使，而是在我的认知里，王是不可能意外死亡的，这种认知上的颠覆就好比听说本拉登复活了并宣布当上了美国总统一样令人不可置信。\n\n这要从我第一次见到王说起。\n\n那天我正要去海边，这是我几年前失恋后养成的习惯，一个人看海可以让我的内心平静，我总是选择同一个海滩，坐在同一条长凳上，看同一片风景。\n\n当我到那边时，已经有一个人坐在我的长凳上了，他望着我，笑吟吟的，好像在等我一般。\n\n这就是我第一次遇见王的情景。\n\n我当时内心十分纠结，心想还是换个位置吧，跟陌生人坐在同一条凳子上太别扭了。\n\n我正要转身离开，王开口了。\n\n“坐吧，换个位置你不习惯。”语气竟像我多年好友一般。\n\n“你认识我？”我心里充满了警惕，这个习惯我没和任何人说过。\n\n“马上就认识了，而且我们会成为好朋友，坐吧，我等了你十分钟了。”他的脸上都是笑意，语速很慢。\n\n也不知道是被他的笑感染还是因为我的好奇，我在凳子的另一头坐了下来。\n\n不过这个时候我已经没有看风景的心情了，沉默了一会儿，我忍不住开口。\n\n“你是怎么知道我会来的？而且我们还会成为好朋友？”\n\n王把本来望向海面的目光投向了我，回答道：“因为我是一个预言家。”\n\n接下来我听到了我这辈子听过的最不可思议的事。\n\n王告诉我，他是一名时间旅行者，时间对他来说就像三维生物的上下左右前后一样可以自由穿行，他可以根据一个人下一刻做出的动作看到他将会有怎样的未来，甚至可以自己做假设并根据这种假设看到未来。\n\n我肯定是不会相信的，但看他说的有趣，忍不住继续跟他聊了下去。\n\n“你还可以穿行到过去？这么说你不就无所不能咯？你完全可以不断穿越到过去，去修复以前的错误，直到结果你是满意的为止不是吗？”我想起了传说中的S/L大法，脑洞大开。\n\n王诡异地看了我一眼，摇了摇头回答道：“做不到。改变过去是很危险的一件事，我尝试过一次，引起了时空乱流，差点被困在一段时间片段里，如果后来不是运气好逃出来，我就会一直被困在里面，不断重复那段时间里发生的事，就像无间炼狱一般。而且我也没必要这么做，只要我看得到未来，我就能一直做出最好的选择。”\n\n居然还扯上了时间片段理论，我越发觉得有趣，不断地向他提问，他也不厌其烦地逐一回答了我的问题。比如他告诉我像他隐隐感觉像他这样的人还有很多，只是不知为何至今没有遇到过。比如他说他不能看太远的未来，辣眼睛。\n\n不知不觉聊到了天黑，我们互留了联系方式并约好了下次聊的时间，他告诉我他的名字叫王，没有姓，这让我后来觉得很吃亏，每次叫他都好像在上朝一般。\n\n之后我们就道了别，后来我们也经常聊天吃饭，偶尔一起健个身之类的，我不知道他的工作是什么，只觉得他是个十分神秘的人。\n\n我真正开始相信他的能力是在两年前。\n\n那天中午我约好了朋友一起吃饭，他打电话过来，让我十分钟后再出门。我问他原因，他说我现在出门搭的公交会发生自燃，乘客无一生还。\n\n我自然是不信的，但本着防晦气的原则，我还是默默抽了两根烟后再出发。\n\n到了公交车站，不远处的路口停了几辆消防车与救护车，路面已经被封锁，一辆面目全非的大型车停在中间，从漆黑的外壳上依稀可以看到公交车的影子，消防员和护士医生不停地来回跑动，一些看似家属的人正在大声哭喊，场面如炼狱一般。\n\n我颤颤巍巍地拿起了电话。\n\n“你说的都是真的？”\n\n“当然，幸好我刚刚正在看午饭吃什么能最大提高我的幸福感，在某个未来里正好看到了那辆车燃烧的过程。不然我就得穿越到过去去警告你了，你知道那很危险。”\n\n我挂掉电话，又默默抽了一根烟。\n\n从那以后我对他的能力深信不疑。\n\n大概在一年半前，我们一起吃饭的时候，他突然告诉我他有了女朋友。\n\n“不会很无聊吗，我是说，你都知道将来会发生什么事了，那岂不是一点新鲜感都没有？”\n\n“不会，我在她身上看到的未来里，我都是幸福的，这是我第一次在一个女孩身上看到这种未来，我不会觉得无聊。”\n\n我从他的眼神里看到了前所未有的光芒。我对他说的话是信服的，王从来不会做错误的决定。\n\n自那以后我们的联系便少了起来，我猜他一定是把时间都花在女友身上了，毕竟对于他这种几近无所不能的人来说，能找到一件让自己可以投入进去的事太难了，我也是打心底为这个“注定的好朋友”高兴。\n\n直到我听说他的死讯。\n\n消息来自他的律师，他告诉我王的死亡检测结果是脑死亡，他死前立下遗嘱，死后所有遗物都归我，让我去他家整理东西。\n\n我到了他家，一套不奢华但及其有格调的公寓，家具很少，大多是冷色调，墙上挂着几幅我看不懂的画，都是时钟与漩涡的交织物。\n\n我走进他的卧室，开始整理他的东西，脑袋里还在思考他的死因。\n\n这时一本放在床头柜抽屉里的半旧笔记本吸引了我的注意。我打开第一页，右上角写着“2015/5/20”，看来这是他的日记，这个时间距今一年半，刚好是他告诉我有女朋友的前几天。\n\n也许从里面可以发现什么线索，我这样想着，认真地阅读了起来。\n\n“今天我碰到了一个女孩，她扎着丸子头，穿着黑色T恤和牛仔裤，笑起来十分温暖，我看着她，看向了我们的所有的可能的未来，看到了一片光明，这是我从未有过的体验。我终于明白我这身能力的意义所在，和我活着的使命。”\n\n我接着看了下去，后面一段时间都是记录他如何通过自己的能力追到那个女孩以及如何给女孩许多意想不到的惊喜。\n\n这样的记录持续了一年的时间，这个过程中他的日记频率开始降低，我也没得到什么有用的信息，只知道他似乎越来越少用自己的能力了。\n\n直到九个月前的一篇日记吸引了我的注意力。\n\n“最近吵架的频率似乎上升了，我已经通过查看未来筛选出尽可能好的选择，但冲突还是不可避免的发生，更让我恐惧的是，我发现我看到的未来里我能让她开心的选择也在变少，我很担心有一天这种选择会完全消失。”\n\n我顿觉不妙，接着往下看，王的恐惧日益增加，他又开始频繁地使用起自己的能力来，但好像没有起到什么效果。\n\n我翻到了倒数第二页，右上角上写着三个月前的日期。\n\n“今天她跟我说了分手，在我看到的1431种未来里，她都跟我说了分手，我只能选择不那么痛苦的那种，然后静静等待它的发生。”\n\n我仿佛预感到了什么，翻开了最后一页，那是三天前的日记。\n\n“这三个月我做了许多尝试，我不断地看着不同的未来，试图寻找挽救的方式，不断地做着尝试，结果仍是一无所获。”\n\n“我才明白我一直努力错了方向，我一直看向未来，但是造成这一切的，却是那些不可改变的过去。我们的每一次冲突，我在她每一次需要我的时候的忽视，不断流逝却没有补救的安全感，无数微小的细节，都是造成这一切的原因，这是我在未来里做多少努力都拯救不来的。”\n\n“我一直不敢回头看过去，因为我怕我忍不住去改变它。但是现在我没有其他选择了，我现在明白了我应该做什么，这大概是每一个时间旅行者的结局，我再也没有恐惧了。”\n\n我终于明白了王死亡的原因，他终究还是穿越到了过去，不知道他是穿越到他们哪一次吵架前，还是哪次他需要在她身边却没有出现的时候，又或者是他们的第一次见面。不过这次他运气没那么好，没有逃出来。\n\n又或者是他不愿意逃出来呢，我心想，不管怎么样，他都是幸福的，而且会永远幸福，直到宇宙灭亡。\n\n我抽完最后一根烟，合上了日记。\n\n","source":"_posts/时间旅行者.md","raw":"---\ntitle: 时间旅行者\ndate: 2017-01-06 19:08:23\ntags:\n---\n听说王去世的消息我是十分震惊的。\n\n这并非是那种朋友去世时的不愿相信的感觉驱使，而是在我的认知里，王是不可能意外死亡的，这种认知上的颠覆就好比听说本拉登复活了并宣布当上了美国总统一样令人不可置信。\n\n这要从我第一次见到王说起。\n\n那天我正要去海边，这是我几年前失恋后养成的习惯，一个人看海可以让我的内心平静，我总是选择同一个海滩，坐在同一条长凳上，看同一片风景。\n\n当我到那边时，已经有一个人坐在我的长凳上了，他望着我，笑吟吟的，好像在等我一般。\n\n这就是我第一次遇见王的情景。\n\n我当时内心十分纠结，心想还是换个位置吧，跟陌生人坐在同一条凳子上太别扭了。\n\n我正要转身离开，王开口了。\n\n“坐吧，换个位置你不习惯。”语气竟像我多年好友一般。\n\n“你认识我？”我心里充满了警惕，这个习惯我没和任何人说过。\n\n“马上就认识了，而且我们会成为好朋友，坐吧，我等了你十分钟了。”他的脸上都是笑意，语速很慢。\n\n也不知道是被他的笑感染还是因为我的好奇，我在凳子的另一头坐了下来。\n\n不过这个时候我已经没有看风景的心情了，沉默了一会儿，我忍不住开口。\n\n“你是怎么知道我会来的？而且我们还会成为好朋友？”\n\n王把本来望向海面的目光投向了我，回答道：“因为我是一个预言家。”\n\n接下来我听到了我这辈子听过的最不可思议的事。\n\n王告诉我，他是一名时间旅行者，时间对他来说就像三维生物的上下左右前后一样可以自由穿行，他可以根据一个人下一刻做出的动作看到他将会有怎样的未来，甚至可以自己做假设并根据这种假设看到未来。\n\n我肯定是不会相信的，但看他说的有趣，忍不住继续跟他聊了下去。\n\n“你还可以穿行到过去？这么说你不就无所不能咯？你完全可以不断穿越到过去，去修复以前的错误，直到结果你是满意的为止不是吗？”我想起了传说中的S/L大法，脑洞大开。\n\n王诡异地看了我一眼，摇了摇头回答道：“做不到。改变过去是很危险的一件事，我尝试过一次，引起了时空乱流，差点被困在一段时间片段里，如果后来不是运气好逃出来，我就会一直被困在里面，不断重复那段时间里发生的事，就像无间炼狱一般。而且我也没必要这么做，只要我看得到未来，我就能一直做出最好的选择。”\n\n居然还扯上了时间片段理论，我越发觉得有趣，不断地向他提问，他也不厌其烦地逐一回答了我的问题。比如他告诉我像他隐隐感觉像他这样的人还有很多，只是不知为何至今没有遇到过。比如他说他不能看太远的未来，辣眼睛。\n\n不知不觉聊到了天黑，我们互留了联系方式并约好了下次聊的时间，他告诉我他的名字叫王，没有姓，这让我后来觉得很吃亏，每次叫他都好像在上朝一般。\n\n之后我们就道了别，后来我们也经常聊天吃饭，偶尔一起健个身之类的，我不知道他的工作是什么，只觉得他是个十分神秘的人。\n\n我真正开始相信他的能力是在两年前。\n\n那天中午我约好了朋友一起吃饭，他打电话过来，让我十分钟后再出门。我问他原因，他说我现在出门搭的公交会发生自燃，乘客无一生还。\n\n我自然是不信的，但本着防晦气的原则，我还是默默抽了两根烟后再出发。\n\n到了公交车站，不远处的路口停了几辆消防车与救护车，路面已经被封锁，一辆面目全非的大型车停在中间，从漆黑的外壳上依稀可以看到公交车的影子，消防员和护士医生不停地来回跑动，一些看似家属的人正在大声哭喊，场面如炼狱一般。\n\n我颤颤巍巍地拿起了电话。\n\n“你说的都是真的？”\n\n“当然，幸好我刚刚正在看午饭吃什么能最大提高我的幸福感，在某个未来里正好看到了那辆车燃烧的过程。不然我就得穿越到过去去警告你了，你知道那很危险。”\n\n我挂掉电话，又默默抽了一根烟。\n\n从那以后我对他的能力深信不疑。\n\n大概在一年半前，我们一起吃饭的时候，他突然告诉我他有了女朋友。\n\n“不会很无聊吗，我是说，你都知道将来会发生什么事了，那岂不是一点新鲜感都没有？”\n\n“不会，我在她身上看到的未来里，我都是幸福的，这是我第一次在一个女孩身上看到这种未来，我不会觉得无聊。”\n\n我从他的眼神里看到了前所未有的光芒。我对他说的话是信服的，王从来不会做错误的决定。\n\n自那以后我们的联系便少了起来，我猜他一定是把时间都花在女友身上了，毕竟对于他这种几近无所不能的人来说，能找到一件让自己可以投入进去的事太难了，我也是打心底为这个“注定的好朋友”高兴。\n\n直到我听说他的死讯。\n\n消息来自他的律师，他告诉我王的死亡检测结果是脑死亡，他死前立下遗嘱，死后所有遗物都归我，让我去他家整理东西。\n\n我到了他家，一套不奢华但及其有格调的公寓，家具很少，大多是冷色调，墙上挂着几幅我看不懂的画，都是时钟与漩涡的交织物。\n\n我走进他的卧室，开始整理他的东西，脑袋里还在思考他的死因。\n\n这时一本放在床头柜抽屉里的半旧笔记本吸引了我的注意。我打开第一页，右上角写着“2015/5/20”，看来这是他的日记，这个时间距今一年半，刚好是他告诉我有女朋友的前几天。\n\n也许从里面可以发现什么线索，我这样想着，认真地阅读了起来。\n\n“今天我碰到了一个女孩，她扎着丸子头，穿着黑色T恤和牛仔裤，笑起来十分温暖，我看着她，看向了我们的所有的可能的未来，看到了一片光明，这是我从未有过的体验。我终于明白我这身能力的意义所在，和我活着的使命。”\n\n我接着看了下去，后面一段时间都是记录他如何通过自己的能力追到那个女孩以及如何给女孩许多意想不到的惊喜。\n\n这样的记录持续了一年的时间，这个过程中他的日记频率开始降低，我也没得到什么有用的信息，只知道他似乎越来越少用自己的能力了。\n\n直到九个月前的一篇日记吸引了我的注意力。\n\n“最近吵架的频率似乎上升了，我已经通过查看未来筛选出尽可能好的选择，但冲突还是不可避免的发生，更让我恐惧的是，我发现我看到的未来里我能让她开心的选择也在变少，我很担心有一天这种选择会完全消失。”\n\n我顿觉不妙，接着往下看，王的恐惧日益增加，他又开始频繁地使用起自己的能力来，但好像没有起到什么效果。\n\n我翻到了倒数第二页，右上角上写着三个月前的日期。\n\n“今天她跟我说了分手，在我看到的1431种未来里，她都跟我说了分手，我只能选择不那么痛苦的那种，然后静静等待它的发生。”\n\n我仿佛预感到了什么，翻开了最后一页，那是三天前的日记。\n\n“这三个月我做了许多尝试，我不断地看着不同的未来，试图寻找挽救的方式，不断地做着尝试，结果仍是一无所获。”\n\n“我才明白我一直努力错了方向，我一直看向未来，但是造成这一切的，却是那些不可改变的过去。我们的每一次冲突，我在她每一次需要我的时候的忽视，不断流逝却没有补救的安全感，无数微小的细节，都是造成这一切的原因，这是我在未来里做多少努力都拯救不来的。”\n\n“我一直不敢回头看过去，因为我怕我忍不住去改变它。但是现在我没有其他选择了，我现在明白了我应该做什么，这大概是每一个时间旅行者的结局，我再也没有恐惧了。”\n\n我终于明白了王死亡的原因，他终究还是穿越到了过去，不知道他是穿越到他们哪一次吵架前，还是哪次他需要在她身边却没有出现的时候，又或者是他们的第一次见面。不过这次他运气没那么好，没有逃出来。\n\n又或者是他不愿意逃出来呢，我心想，不管怎么样，他都是幸福的，而且会永远幸福，直到宇宙灭亡。\n\n我抽完最后一根烟，合上了日记。\n\n","slug":"时间旅行者","published":1,"updated":"2017-04-24T08:03:26.261Z","_id":"cj1up2awm0005u4urvukzg7cp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>听说王去世的消息我是十分震惊的。</p>\n<p>这并非是那种朋友去世时的不愿相信的感觉驱使，而是在我的认知里，王是不可能意外死亡的，这种认知上的颠覆就好比听说本拉登复活了并宣布当上了美国总统一样令人不可置信。</p>\n<p>这要从我第一次见到王说起。</p>\n<p>那天我正要去海边，这是我几年前失恋后养成的习惯，一个人看海可以让我的内心平静，我总是选择同一个海滩，坐在同一条长凳上，看同一片风景。</p>\n<p>当我到那边时，已经有一个人坐在我的长凳上了，他望着我，笑吟吟的，好像在等我一般。</p>\n<p>这就是我第一次遇见王的情景。</p>\n<p>我当时内心十分纠结，心想还是换个位置吧，跟陌生人坐在同一条凳子上太别扭了。</p>\n<p>我正要转身离开，王开口了。</p>\n<p>“坐吧，换个位置你不习惯。”语气竟像我多年好友一般。</p>\n<p>“你认识我？”我心里充满了警惕，这个习惯我没和任何人说过。</p>\n<p>“马上就认识了，而且我们会成为好朋友，坐吧，我等了你十分钟了。”他的脸上都是笑意，语速很慢。</p>\n<p>也不知道是被他的笑感染还是因为我的好奇，我在凳子的另一头坐了下来。</p>\n<p>不过这个时候我已经没有看风景的心情了，沉默了一会儿，我忍不住开口。</p>\n<p>“你是怎么知道我会来的？而且我们还会成为好朋友？”</p>\n<p>王把本来望向海面的目光投向了我，回答道：“因为我是一个预言家。”</p>\n<p>接下来我听到了我这辈子听过的最不可思议的事。</p>\n<p>王告诉我，他是一名时间旅行者，时间对他来说就像三维生物的上下左右前后一样可以自由穿行，他可以根据一个人下一刻做出的动作看到他将会有怎样的未来，甚至可以自己做假设并根据这种假设看到未来。</p>\n<p>我肯定是不会相信的，但看他说的有趣，忍不住继续跟他聊了下去。</p>\n<p>“你还可以穿行到过去？这么说你不就无所不能咯？你完全可以不断穿越到过去，去修复以前的错误，直到结果你是满意的为止不是吗？”我想起了传说中的S/L大法，脑洞大开。</p>\n<p>王诡异地看了我一眼，摇了摇头回答道：“做不到。改变过去是很危险的一件事，我尝试过一次，引起了时空乱流，差点被困在一段时间片段里，如果后来不是运气好逃出来，我就会一直被困在里面，不断重复那段时间里发生的事，就像无间炼狱一般。而且我也没必要这么做，只要我看得到未来，我就能一直做出最好的选择。”</p>\n<p>居然还扯上了时间片段理论，我越发觉得有趣，不断地向他提问，他也不厌其烦地逐一回答了我的问题。比如他告诉我像他隐隐感觉像他这样的人还有很多，只是不知为何至今没有遇到过。比如他说他不能看太远的未来，辣眼睛。</p>\n<p>不知不觉聊到了天黑，我们互留了联系方式并约好了下次聊的时间，他告诉我他的名字叫王，没有姓，这让我后来觉得很吃亏，每次叫他都好像在上朝一般。</p>\n<p>之后我们就道了别，后来我们也经常聊天吃饭，偶尔一起健个身之类的，我不知道他的工作是什么，只觉得他是个十分神秘的人。</p>\n<p>我真正开始相信他的能力是在两年前。</p>\n<p>那天中午我约好了朋友一起吃饭，他打电话过来，让我十分钟后再出门。我问他原因，他说我现在出门搭的公交会发生自燃，乘客无一生还。</p>\n<p>我自然是不信的，但本着防晦气的原则，我还是默默抽了两根烟后再出发。</p>\n<p>到了公交车站，不远处的路口停了几辆消防车与救护车，路面已经被封锁，一辆面目全非的大型车停在中间，从漆黑的外壳上依稀可以看到公交车的影子，消防员和护士医生不停地来回跑动，一些看似家属的人正在大声哭喊，场面如炼狱一般。</p>\n<p>我颤颤巍巍地拿起了电话。</p>\n<p>“你说的都是真的？”</p>\n<p>“当然，幸好我刚刚正在看午饭吃什么能最大提高我的幸福感，在某个未来里正好看到了那辆车燃烧的过程。不然我就得穿越到过去去警告你了，你知道那很危险。”</p>\n<p>我挂掉电话，又默默抽了一根烟。</p>\n<p>从那以后我对他的能力深信不疑。</p>\n<p>大概在一年半前，我们一起吃饭的时候，他突然告诉我他有了女朋友。</p>\n<p>“不会很无聊吗，我是说，你都知道将来会发生什么事了，那岂不是一点新鲜感都没有？”</p>\n<p>“不会，我在她身上看到的未来里，我都是幸福的，这是我第一次在一个女孩身上看到这种未来，我不会觉得无聊。”</p>\n<p>我从他的眼神里看到了前所未有的光芒。我对他说的话是信服的，王从来不会做错误的决定。</p>\n<p>自那以后我们的联系便少了起来，我猜他一定是把时间都花在女友身上了，毕竟对于他这种几近无所不能的人来说，能找到一件让自己可以投入进去的事太难了，我也是打心底为这个“注定的好朋友”高兴。</p>\n<p>直到我听说他的死讯。</p>\n<p>消息来自他的律师，他告诉我王的死亡检测结果是脑死亡，他死前立下遗嘱，死后所有遗物都归我，让我去他家整理东西。</p>\n<p>我到了他家，一套不奢华但及其有格调的公寓，家具很少，大多是冷色调，墙上挂着几幅我看不懂的画，都是时钟与漩涡的交织物。</p>\n<p>我走进他的卧室，开始整理他的东西，脑袋里还在思考他的死因。</p>\n<p>这时一本放在床头柜抽屉里的半旧笔记本吸引了我的注意。我打开第一页，右上角写着“2015/5/20”，看来这是他的日记，这个时间距今一年半，刚好是他告诉我有女朋友的前几天。</p>\n<p>也许从里面可以发现什么线索，我这样想着，认真地阅读了起来。</p>\n<p>“今天我碰到了一个女孩，她扎着丸子头，穿着黑色T恤和牛仔裤，笑起来十分温暖，我看着她，看向了我们的所有的可能的未来，看到了一片光明，这是我从未有过的体验。我终于明白我这身能力的意义所在，和我活着的使命。”</p>\n<p>我接着看了下去，后面一段时间都是记录他如何通过自己的能力追到那个女孩以及如何给女孩许多意想不到的惊喜。</p>\n<p>这样的记录持续了一年的时间，这个过程中他的日记频率开始降低，我也没得到什么有用的信息，只知道他似乎越来越少用自己的能力了。</p>\n<p>直到九个月前的一篇日记吸引了我的注意力。</p>\n<p>“最近吵架的频率似乎上升了，我已经通过查看未来筛选出尽可能好的选择，但冲突还是不可避免的发生，更让我恐惧的是，我发现我看到的未来里我能让她开心的选择也在变少，我很担心有一天这种选择会完全消失。”</p>\n<p>我顿觉不妙，接着往下看，王的恐惧日益增加，他又开始频繁地使用起自己的能力来，但好像没有起到什么效果。</p>\n<p>我翻到了倒数第二页，右上角上写着三个月前的日期。</p>\n<p>“今天她跟我说了分手，在我看到的1431种未来里，她都跟我说了分手，我只能选择不那么痛苦的那种，然后静静等待它的发生。”</p>\n<p>我仿佛预感到了什么，翻开了最后一页，那是三天前的日记。</p>\n<p>“这三个月我做了许多尝试，我不断地看着不同的未来，试图寻找挽救的方式，不断地做着尝试，结果仍是一无所获。”</p>\n<p>“我才明白我一直努力错了方向，我一直看向未来，但是造成这一切的，却是那些不可改变的过去。我们的每一次冲突，我在她每一次需要我的时候的忽视，不断流逝却没有补救的安全感，无数微小的细节，都是造成这一切的原因，这是我在未来里做多少努力都拯救不来的。”</p>\n<p>“我一直不敢回头看过去，因为我怕我忍不住去改变它。但是现在我没有其他选择了，我现在明白了我应该做什么，这大概是每一个时间旅行者的结局，我再也没有恐惧了。”</p>\n<p>我终于明白了王死亡的原因，他终究还是穿越到了过去，不知道他是穿越到他们哪一次吵架前，还是哪次他需要在她身边却没有出现的时候，又或者是他们的第一次见面。不过这次他运气没那么好，没有逃出来。</p>\n<p>又或者是他不愿意逃出来呢，我心想，不管怎么样，他都是幸福的，而且会永远幸福，直到宇宙灭亡。</p>\n<p>我抽完最后一根烟，合上了日记。</p>\n","excerpt":"","more":"<p>听说王去世的消息我是十分震惊的。</p>\n<p>这并非是那种朋友去世时的不愿相信的感觉驱使，而是在我的认知里，王是不可能意外死亡的，这种认知上的颠覆就好比听说本拉登复活了并宣布当上了美国总统一样令人不可置信。</p>\n<p>这要从我第一次见到王说起。</p>\n<p>那天我正要去海边，这是我几年前失恋后养成的习惯，一个人看海可以让我的内心平静，我总是选择同一个海滩，坐在同一条长凳上，看同一片风景。</p>\n<p>当我到那边时，已经有一个人坐在我的长凳上了，他望着我，笑吟吟的，好像在等我一般。</p>\n<p>这就是我第一次遇见王的情景。</p>\n<p>我当时内心十分纠结，心想还是换个位置吧，跟陌生人坐在同一条凳子上太别扭了。</p>\n<p>我正要转身离开，王开口了。</p>\n<p>“坐吧，换个位置你不习惯。”语气竟像我多年好友一般。</p>\n<p>“你认识我？”我心里充满了警惕，这个习惯我没和任何人说过。</p>\n<p>“马上就认识了，而且我们会成为好朋友，坐吧，我等了你十分钟了。”他的脸上都是笑意，语速很慢。</p>\n<p>也不知道是被他的笑感染还是因为我的好奇，我在凳子的另一头坐了下来。</p>\n<p>不过这个时候我已经没有看风景的心情了，沉默了一会儿，我忍不住开口。</p>\n<p>“你是怎么知道我会来的？而且我们还会成为好朋友？”</p>\n<p>王把本来望向海面的目光投向了我，回答道：“因为我是一个预言家。”</p>\n<p>接下来我听到了我这辈子听过的最不可思议的事。</p>\n<p>王告诉我，他是一名时间旅行者，时间对他来说就像三维生物的上下左右前后一样可以自由穿行，他可以根据一个人下一刻做出的动作看到他将会有怎样的未来，甚至可以自己做假设并根据这种假设看到未来。</p>\n<p>我肯定是不会相信的，但看他说的有趣，忍不住继续跟他聊了下去。</p>\n<p>“你还可以穿行到过去？这么说你不就无所不能咯？你完全可以不断穿越到过去，去修复以前的错误，直到结果你是满意的为止不是吗？”我想起了传说中的S/L大法，脑洞大开。</p>\n<p>王诡异地看了我一眼，摇了摇头回答道：“做不到。改变过去是很危险的一件事，我尝试过一次，引起了时空乱流，差点被困在一段时间片段里，如果后来不是运气好逃出来，我就会一直被困在里面，不断重复那段时间里发生的事，就像无间炼狱一般。而且我也没必要这么做，只要我看得到未来，我就能一直做出最好的选择。”</p>\n<p>居然还扯上了时间片段理论，我越发觉得有趣，不断地向他提问，他也不厌其烦地逐一回答了我的问题。比如他告诉我像他隐隐感觉像他这样的人还有很多，只是不知为何至今没有遇到过。比如他说他不能看太远的未来，辣眼睛。</p>\n<p>不知不觉聊到了天黑，我们互留了联系方式并约好了下次聊的时间，他告诉我他的名字叫王，没有姓，这让我后来觉得很吃亏，每次叫他都好像在上朝一般。</p>\n<p>之后我们就道了别，后来我们也经常聊天吃饭，偶尔一起健个身之类的，我不知道他的工作是什么，只觉得他是个十分神秘的人。</p>\n<p>我真正开始相信他的能力是在两年前。</p>\n<p>那天中午我约好了朋友一起吃饭，他打电话过来，让我十分钟后再出门。我问他原因，他说我现在出门搭的公交会发生自燃，乘客无一生还。</p>\n<p>我自然是不信的，但本着防晦气的原则，我还是默默抽了两根烟后再出发。</p>\n<p>到了公交车站，不远处的路口停了几辆消防车与救护车，路面已经被封锁，一辆面目全非的大型车停在中间，从漆黑的外壳上依稀可以看到公交车的影子，消防员和护士医生不停地来回跑动，一些看似家属的人正在大声哭喊，场面如炼狱一般。</p>\n<p>我颤颤巍巍地拿起了电话。</p>\n<p>“你说的都是真的？”</p>\n<p>“当然，幸好我刚刚正在看午饭吃什么能最大提高我的幸福感，在某个未来里正好看到了那辆车燃烧的过程。不然我就得穿越到过去去警告你了，你知道那很危险。”</p>\n<p>我挂掉电话，又默默抽了一根烟。</p>\n<p>从那以后我对他的能力深信不疑。</p>\n<p>大概在一年半前，我们一起吃饭的时候，他突然告诉我他有了女朋友。</p>\n<p>“不会很无聊吗，我是说，你都知道将来会发生什么事了，那岂不是一点新鲜感都没有？”</p>\n<p>“不会，我在她身上看到的未来里，我都是幸福的，这是我第一次在一个女孩身上看到这种未来，我不会觉得无聊。”</p>\n<p>我从他的眼神里看到了前所未有的光芒。我对他说的话是信服的，王从来不会做错误的决定。</p>\n<p>自那以后我们的联系便少了起来，我猜他一定是把时间都花在女友身上了，毕竟对于他这种几近无所不能的人来说，能找到一件让自己可以投入进去的事太难了，我也是打心底为这个“注定的好朋友”高兴。</p>\n<p>直到我听说他的死讯。</p>\n<p>消息来自他的律师，他告诉我王的死亡检测结果是脑死亡，他死前立下遗嘱，死后所有遗物都归我，让我去他家整理东西。</p>\n<p>我到了他家，一套不奢华但及其有格调的公寓，家具很少，大多是冷色调，墙上挂着几幅我看不懂的画，都是时钟与漩涡的交织物。</p>\n<p>我走进他的卧室，开始整理他的东西，脑袋里还在思考他的死因。</p>\n<p>这时一本放在床头柜抽屉里的半旧笔记本吸引了我的注意。我打开第一页，右上角写着“2015/5/20”，看来这是他的日记，这个时间距今一年半，刚好是他告诉我有女朋友的前几天。</p>\n<p>也许从里面可以发现什么线索，我这样想着，认真地阅读了起来。</p>\n<p>“今天我碰到了一个女孩，她扎着丸子头，穿着黑色T恤和牛仔裤，笑起来十分温暖，我看着她，看向了我们的所有的可能的未来，看到了一片光明，这是我从未有过的体验。我终于明白我这身能力的意义所在，和我活着的使命。”</p>\n<p>我接着看了下去，后面一段时间都是记录他如何通过自己的能力追到那个女孩以及如何给女孩许多意想不到的惊喜。</p>\n<p>这样的记录持续了一年的时间，这个过程中他的日记频率开始降低，我也没得到什么有用的信息，只知道他似乎越来越少用自己的能力了。</p>\n<p>直到九个月前的一篇日记吸引了我的注意力。</p>\n<p>“最近吵架的频率似乎上升了，我已经通过查看未来筛选出尽可能好的选择，但冲突还是不可避免的发生，更让我恐惧的是，我发现我看到的未来里我能让她开心的选择也在变少，我很担心有一天这种选择会完全消失。”</p>\n<p>我顿觉不妙，接着往下看，王的恐惧日益增加，他又开始频繁地使用起自己的能力来，但好像没有起到什么效果。</p>\n<p>我翻到了倒数第二页，右上角上写着三个月前的日期。</p>\n<p>“今天她跟我说了分手，在我看到的1431种未来里，她都跟我说了分手，我只能选择不那么痛苦的那种，然后静静等待它的发生。”</p>\n<p>我仿佛预感到了什么，翻开了最后一页，那是三天前的日记。</p>\n<p>“这三个月我做了许多尝试，我不断地看着不同的未来，试图寻找挽救的方式，不断地做着尝试，结果仍是一无所获。”</p>\n<p>“我才明白我一直努力错了方向，我一直看向未来，但是造成这一切的，却是那些不可改变的过去。我们的每一次冲突，我在她每一次需要我的时候的忽视，不断流逝却没有补救的安全感，无数微小的细节，都是造成这一切的原因，这是我在未来里做多少努力都拯救不来的。”</p>\n<p>“我一直不敢回头看过去，因为我怕我忍不住去改变它。但是现在我没有其他选择了，我现在明白了我应该做什么，这大概是每一个时间旅行者的结局，我再也没有恐惧了。”</p>\n<p>我终于明白了王死亡的原因，他终究还是穿越到了过去，不知道他是穿越到他们哪一次吵架前，还是哪次他需要在她身边却没有出现的时候，又或者是他们的第一次见面。不过这次他运气没那么好，没有逃出来。</p>\n<p>又或者是他不愿意逃出来呢，我心想，不管怎么样，他都是幸福的，而且会永远幸福，直到宇宙灭亡。</p>\n<p>我抽完最后一根烟，合上了日记。</p>\n"},{"title":"幸福简易教学指南（二）","date":"2016-12-26T06:48:19.000Z","_content":"","source":"_posts/幸福简易教学指南（二）.md","raw":"---\ntitle: 幸福简易教学指南（二）\ndate: 2016-12-26 14:48:19\ntags:\n---\n","slug":"幸福简易教学指南（二）","published":1,"updated":"2016-12-26T06:48:19.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1vubg8a00006otgwt0ejsxa","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}